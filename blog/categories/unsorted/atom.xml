<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Unsorted | Scribbles and Bits]]></title>
  <link href="http://derek.github.io/blog/blog/categories/unsorted/atom.xml" rel="self"/>
  <link href="http://derek.github.io/blog/"/>
  <updated>2014-05-17T18:13:40-07:00</updated>
  <id>http://derek.github.io/blog/</id>
  <author>
    <name><![CDATA[Derek Gathright]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Splitt]]></title>
    <link href="http://derek.github.io/blog/2011/splitt/"/>
    <updated>2011-06-10T16:23:21-07:00</updated>
    <id>http://derek.github.io/blog/2011/splitt</id>
    <content type="html"><![CDATA[<p>Growing up in Kansas City, I spent quite a few summer afternoons at Royals games.  My grandparents had season tickets, front row, just next to the home dugout.  Amazing seats.  It pretty much felt like you were on the field.  As much as I love some of my other teams, there&rsquo;s a certain connection you have with your baseball team.  I suspect that is largely due to the fact that they play just about every night, 162 games per season.  If you are a fan, you are in it for the long-haul.  It takes commitment.</p>

<p>Royals fans are a great bunch.  I&rsquo;ll always view Kansas City as a baseball town, no matter how good the Chiefs are any given season.  That&rsquo;s especially remarkable considering the fact that we&rsquo;ve only had a single winning season since we won the World Series.  FYI, that championship happened 25 years ago, if you didn&rsquo;t know.  Us Royals fans know.  It&rsquo;s always in the back of our minds as we hover around the .500 mark anytime after April. &ldquo;This is the year, we&rsquo;re gonna do it!&rdquo; is what we think.  Most fans say that about winning the division.  Not us.  We just want 82 wins in one year, a winning season. Just once, and then we&rsquo;ll build from there.  Baby steps.  Progress.</p>

<p>Over the stretch of a 162 game season, most baseball fans will watch or listen to dozens and dozens of games.  There&rsquo;s a connection you feel with the guys in the booth, a one-way bond that is developed over hundreds of hours of listening to their narrative.  I can literally hear the Royals announcers in my head as I write this and make their voices say anything I want.  I know them that well.  Their catch phrases.  Their quirks.  Their jokes.  I feel like I&rsquo;ve known them my whole life, yet never met them once.  I&rsquo;m not even sure I&rsquo;d recognize them if seen in person, but I could recognize their voice from across a crowded room.</p>

<p>Tuesday night, one of our announcers lost a battle with cancer.  When the news came out last week that Paul &ldquo;Splitt&rdquo; Splitorff was ill, the rumors swirled that he had less than a week to live.  It was a shock.  We all suspected he wasn&rsquo;t in great health, but no one thought it was something this bad.  Less than a month ago he was calling a game.  Two weeks ago he was doing the Royals postgame show.  People don&rsquo;t just&hellip; go like that.  Do they?</p>

<p>Unfortunately, yes.</p>

<p>As I watched the Royals vs Baltimore game the day of his passing, the Royals TV broadcast observed an inning of silence for a man who gave 2/3s of his life to the organization.  He was one of the first players drafted by the new expansion Royals in 1968, and pitched wearing royal blue all 16 years until his retirement.  After his retirement, he began an even longer 24-year career as a broadcaster with the team.</p>

<p>He wasn&rsquo;t the greatest pitcher the team ever had, but he still holds the record for most won games.  He wasn&rsquo;t the greatest announcer the game has seen, but he was ours.  He was mine.  He was a constant.  Every night you know you can turn on the ball game and listen to the same guys call a game.</p>

<p>Broadcasters are special.  So much has changed in your life, but they&rsquo;re still doing the exact same thing they were decades before.  The day you graduated high school, they were calling a Royals game.  The day you got married, they were calling a game.  The day you had your first child, they called a game.  The day your kids graduated high school, those same guys are calling yet another game from the exact same booth for the exact same team.</p>

<p>Inevitably though, change must occur, and the next generation is given their chance.  Sad that this time it happened sooner than it should have.</p>

<p>We&rsquo;ll miss you Splitt.</p>

<div align="center"><img src="http://www.nerdbaseball.com/wp-content/uploads/2009/08/splittorff-paul1.jpg"></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Secure OAuth in JavaScript]]></title>
    <link href="http://derek.github.io/blog/2010/how-to-secure-oauth-in-javascript/"/>
    <updated>2010-10-21T01:33:51-07:00</updated>
    <id>http://derek.github.io/blog/2010/how-to-secure-oauth-in-javascript</id>
    <content type="html"><![CDATA[<p>Wouldn&rsquo;t it be awesome if we could use OAuth in JavaScript-only apps? JS is a powerful, expressive programming language, and the browser engines are getting <a title="arewefastyet.com" href="http://arewefastyet.com/">faster and faster all the time</a>. Why not use JavaScript to conduct your API calls and parse your data? In many cases, it is unnecessary to maintain a server-side proxy if all it is doing is making API calls for you and hiding your OAuth keys.</p>

<p>Think about this&hellip; If you don&rsquo;t need any server-side processing, your applications suddenly become infinitely scaleable, right? We could host on the cheapest of cheap commodity hosting. Heck, if all we&rsquo;re doing is serving static HTML/CSS/JS files, just throw it on a CDN like S3 or CloudFiles and pay per GB.</p>

<p>Before you get too excited, realize that there is a fundamental problem with OAuth in JS. Because JavaScript in the browser is &ldquo;view-source&rdquo;, you are always forced to expose your consumer key pair, which compromises the security of your application. <em>sigh</em></p>

<p>For example, when Twitter recently deprecated their Basic Auth services, that left OAuth as the only authentication method. It was supposed to be <a title="OAuth-only Twitter: What it Means for JavaScript Apps" href="http://blog.programmableweb.com/2010/08/31/oauth-only-twitter-what-it-means-for-javascript-apps/">the death of JS-only Twitter apps</a>. This was unfortunate for quite a few developers who leveraged the browsers ability to do Basic auth, to help with scaling their Twitter apps. I know, I was one of them.</p>

<p>So then I began to think what if you weren&rsquo;t forced to expose your keys? What if your JS app could talk to any web API out there, in a secure, user-authenticated way?</p>

<p>Is that actually possible? Yup.</p>

<p><strong><a id="more"></a><a id="more-780"></a>Backstory</strong></p>

<p>Unknowingly at the time, my quest for a JS only OAuth app began two years ago.</p>

<p>When TechCrunch covered <a href="http://techcrunch.com/2008/07/24/tweenky-brings-gmails-good-looks-to-twitter/">the launch of my Twitter client</a>, the app pretty quickly died from the traffic they were sending my way. The problem is 90% of it was written in PHP and used a relational database to store waaaaaay to much data. Neither of them were designed to scale to 20k users in just a few minutes. After days of tweaking and optimizing, I finally gave up on the design. I realized I didn&rsquo;t need PHP to parse the data, or a database to host the data, so I began a rewrite with the goal of removing as much server-side code as possible. I threw away the database, moved off expensive EC2 and onto commodity hosting where it worked great for the next year or so with some occasional tweaking. As hard as I tried, I never thought I&rsquo;d be able to completely get rid of the backend because I needed a proxy to securely handle the OAuth requests to Twitter. &ldquo;That&rsquo;s ok, close enough&rdquo; I thought.</p>

<p>One day I was reading the Yahoo Query Language <a href="http://developer.yahoo.com/yql/guide/">documentation</a>, and I came across a section about using YQL&rsquo;s storage API to hide authentication info to be used in your queries. Ah ha! Could I actually use that for OAuth? I set to find out. I began learning the ins &amp; outs of OAuth, which includes reading <a href="http://tools.ietf.org/html/rfc5849">RFC 5849: The OAuth 1.0 Protocol</a> many, many times, and staring at the <a href="http://p2p.wrox.com/content/sites/default/files/users/17/image/figures%20ch6/531327%20f0602.png">OAuth Authentication Flow diagram</a> for loooooong time. By the end of the weekend, I had successfully modified my recently rewritten Twitter client&rsquo;s code-base (now YUI3 based) to remove all server-side programming.</p>

<p>Finally! A secure, pure JavaScript solution to OAuth.</p>

<p><strong>Some Prep Work</strong></p>

<p>So let&rsquo;s crack the code of what is necessary to do OAuth securely in JavaScript.</p>

<ul>
    <li>You cannot store your consumer keys inside your JS code. Not even obfuscated. But it has to be stored somewhere web-accessible so your JS code can talk to it.</li>
    <li>Because of the same-origin policy, that 'somewhere' has to be the same domain as your JS app. Unless of course you only rely on HTTP GET, in which case you can do JSONP.</li>
    <li>Your storage location cannot transmit your consumer key pair back to you. So that means it needs to do the OAuth request on your behalf.</li>
</ul>


<p>So hmm&hellip;. what is web accessible, can talk to APIs, and also has data storage? YQL.</p>

<p><strong>Yahoo Query Language</strong></p>

<p><img style="float: left; margin: 0px 10px 10px 0px;" src="http://farm3.static.flickr.com/2601/3858500752_9c3a39e4af.jpg" alt="" width="100" /></p>

<p><a title="Yahoo Query Language" href="http://developer.yahoo.com/yql/">YQL</a> is an expressive SQL-like language that lets you query, filter, and join data across web servers. Along with YUI, it is by far my favorite product Yahoo has for developers. Both are simply amazing tools. I won&rsquo;t go into detail on the specifics of what YQL is in this post, and instead point you to slides from one of my recent talks on the subject <a href="http://drgath.github.com/talks/20101011_SoCaljs/index.html">here</a> (best viewed in Chrome). All you need to know for this post is that you can use it to access any web-accessible API. In the case of this post, we&rsquo;ll talk to the Twitter API.</p>

<p>So now that we know it is possible, let&rsquo;s see it in action.</p>

<p><strong>How It Works</strong></p>

<p>First let&rsquo;s take a look at how you would call your Twitter friends timeline via YQL w/ OAuth. Using my @derektest user, I created a new OAuth app at <a href="http://dev.twitter.com">dev.twitter.com</a> and used the keys it generated for my user/app combo to generate this YQL query.</p>

<pre lang="sql">SELECT * FROM twitter.status.timeline.friends
WHERE oauth_consumer_key = '9DiJt6Faw0Dyr61tVOATA'
AND oauth_consumer_secret = 'XBF9j0B2SZAOWg44QTu6fCwYy5JtivoNNpvJMs6cA'
AND oauth_token = '18342542-NkgUoRinvdJVILEwCUQJ3sL2CIm2ZwzS5jjj2Lg7y'
AND oauth_token_secret = 'D6ewAzsueTzQmrAJGFH0phV5zgWT88FOtcMeqW4YeI';</pre>


<p>So take that query, URL encode it, and throw it into a URL querystring. Like so&hellip;
<a href="https://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20twitter.status.timeline.friends%20where%20oauth_consumer_key%20%3D%20">https://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20twitter.status.timeline.friends%20where%20oauth_consumer_key%20%3D%20</a>'9DiJt6Faw0Dyr61tVOATA'%20AND%20oauth_consumer_secret%20%3D%20'XBF9j0B2SZAOWg44QTu6fCwYy5JtivoNNpvJMs6cA'%20AND%20oauth_token%20%3D%20'18342542-NkgUoRinvdJVILEwCUQJ3sL2CIm2ZwzS5jjj2Lg7y'%20and%20oauth_token_secret%20%3D%20'D6ewAzsueTzQmrAJGFH0phV5zgWT88FOtcMeqW4YeI'%3B&amp;diagnostics=true&amp;env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys</p>

<p>That unique URL will give you a list of the people @derektest follows (which is only @derek). You can play around with the query in the <a href="https://developer.yahoo.com/yql/console/?q=select%20*%20from%20twitter.status.timeline.friends%20where%20id%3D1972%3B&amp;env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys#h=select%20*%20from%20twitter.status.timeline.friends%20where%20oauth_consumer_secret%20%3D%20%27foo%27%20AND%20oauth_consumer_key%20%3D%20%27bar%27%20AND%20oauth_token%20%3D%20%27baz%27%20and%20oauth_token_secret%20%3D%20%27biz%27%3B">YQL Console</a>, or view the results in an <a href="https://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20twitter.status.timeline.friends%20where%20oauth_consumer_key%20%3D%20'9DiJt6Faw0Dyr61tVOATA'%20AND%20oauth_consumer_secret%20%3D%20'XBF9j0B2SZAOWg44QTu6fCwYy5JtivoNNpvJMs6cA'%20AND%20oauth_token%20%3D%20'18342542-NkgUoRinvdJVILEwCUQJ3sL2CIm2ZwzS5jjj2Lg7y'%20and%20oauth_token_secret%20%3D%20'D6ewAzsueTzQmrAJGFH0phV5zgWT88FOtcMeqW4YeI'%3B&amp;diagnostics=true&amp;env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys">XML feed</a>.</p>

<p>But there&rsquo;s a problem using that query, because? You guessed it, you&rsquo;ve exposed your consumer key-pair. So let&rsquo;s work on hiding those.</p>

<p>First step, turn the embedded parameters into environment variables by using the <em>SET</em> command.</p>

<pre lang="sql">set oauth_consumer_key='9DiJt6Faw0Dyr61tVOATA' on twitter;
set oauth_consumer_secret='XBF9j0B2SZAOWg44QTu6fCwYy5JtivoNNpvJMs6cA' on twitter;
set oauth_token='18342542-NkgUoRinvdJVILEwCUQJ3sL2CIm2ZwzS5jjj2Lg7y' on twitter;
set oauth_token_secret='D6ewAzsueTzQmrAJGFH0phV5zgWT88FOtcMeqW4YeI' on twitter;
select * from twitter.status.timeline.friends;</pre>


<p>Now that we&rsquo;ve turned all the parameters into environment variables, the next step is to throw the consumer key pair into YQL&rsquo;s storage so only YQL can access it.</p>

<p>To do this, create a YQL environment file, similar to this one, <a href="http://derekgathright.com/code/yahoo/yql/oauthdemo.txt"><a href="http://derekgathright.com/code/yahoo/yql/oauthdemo.txt">http://derekgathright.com/code/yahoo/yql/oauthdemo.txt</a></a></p>

<p>As you&rsquo;ll see, it&rsquo;s just a regular text file where I pasted my consumer key pair, along with importing the YQL community tables using the <em>ENV</em> command. Since we&rsquo;re replacing the previously included env file (store://datatables.org/alltableswithkeys) with our own, we need to chain-load it back in because it includes the Twitter tables. If you miss that step, you&rsquo;ll get a &ldquo;<em>No definition found for Table twitter.status.timeline.friends</em>&rdquo; error.</p>

<p>Before we store the env file in YQL, let&rsquo;s test it with this new query:</p>

<pre lang="sql">set oauth_token='18342542-NkgUoRinvdJVILEwCUQJ3sL2CIm2ZwzS5jjj2Lg7y' on twitter;
set oauth_token_secret='D6ewAzsueTzQmrAJGFH0phV5zgWT88FOtcMeqW4YeI' on twitter;
select * from twitter.status.timeline.friends;</pre>


<p>Also, you&rsquo;ll have to change the env file loaded in the querystring to &ldquo;<em>?env=<a href="http://derekgathright.com/code/yahoo/yql/oauthdemo.txt">http://derekgathright.com/code/yahoo/yql/oauthdemo.txt</a></em>&rdquo;</p>

<p>(<em>View: <a href="https://developer.yahoo.com/yql/console/?env=http://derekgathright.com/code/yahoo/yql/oauthdemo.txt#h=set%20oauth_token%3D%2718342542-NkgUoRinvdJVILEwCUQJ3sL2CIm2ZwzS5jjj2Lg7y%27%20on%20twitter%3B%0Aset%20oauth_token_secret%3D%27D6ewAzsueTzQmrAJGFH0phV5zgWT88FOtcMeqW4YeI%27%20on%20twitter%3B%0A%0Aselect%20*%20from%20twitter.status.timeline.friends%3B&amp;q=set%20oauth_token%3D%2718342542-NkgUoRinvdJVILEwCUQJ3sL2CIm2ZwzS5jjj2Lg7y%27%20on%20twitter%3B%0Aset%20oauth_token_secret%3D%27D6ewAzsueTzQmrAJGFH0phV5zgWT88FOtcMeqW4YeI%27%20on%20twitter%3B%0A%0Aselect%20*%20from%20twitter.status.timeline.friends%3B">YQL Console</a> &ndash; <a href="https://query.yahooapis.com/v1/public/yql?q=set%20oauth_token%3D'18342542-NkgUoRinvdJVILEwCUQJ3sL2CIm2ZwzS5jjj2Lg7y'%20on%20twitter%3B%0Aset%20oauth_token_secret%3D'D6ewAzsueTzQmrAJGFH0phV5zgWT88FOtcMeqW4YeI'%20on%20twitter%3B%0A%0Aselect%20*%20from%20twitter.status.timeline.friends%3B&amp;diagnostics=true&amp;env=http%3A%2F%2Fderekgathright.com%2Fcode%2Fyahoo%2Fyql%2Foauthdemo.txt">Results</a></em>)</p>

<p>Now that we have our environment file created and tested, let&rsquo;s tell YQL to import it. To do that, we&rsquo;ll construct a YQL query similar to:</p>

<pre lang="sql">insert into yql.storage.admin (name,url)
values ("oauthdemo","http://derekgathright.com/code/yahoo/yql/oauthdemo.txt")</pre>


<p>Which returns:</p>

<pre lang="xml"> 
       store://derekgathright.com/oauthdemo
<select>store://VfoIoYWhLWLxYzRTcrbvNb</select>

       [hidden]</pre>


<p>You now have 3 keys pointing to your data, and each does something different (think: unix permissions, R/W/X). For more information on what each of the 3 does, <a href="http://developer.yahoo.com/yql/guide/yql-storage-select-update-delete.html">Using YQL to Read, Update, and Delete Records</a>.</p>

<p>For this example we want the <em>execute</em> key, which is really just an alias to our stored env file. So if we change our query&rsquo;s URL to <em>?env=store://derekgathright.com/oauthdemo</em> and use the same YQL query as last time, you&rsquo;ll see we have now hidden our consumer key pair from the public.</p>

<p>(View: <a href="https://developer.yahoo.com/yql/console/?env=store://derekgathright.com/oauthdemo#h=set%20oauth_token%3D%2718342542-NkgUoRinvdJVILEwCUQJ3sL2CIm2ZwzS5jjj2Lg7y%27%20on%20twitter%3B%0Aset%20oauth_token_secret%3D%27D6ewAzsueTzQmrAJGFH0phV5zgWT88FOtcMeqW4YeI%27%20on%20twitter%3B%0A%0Aselect%20*%20from%20twitter.status.timeline.friends%3B">YQL Console</a> &ndash; <a href="https://query.yahooapis.com/v1/public/yql?q=set%20oauth_token%3D'18342542-NkgUoRinvdJVILEwCUQJ3sL2CIm2ZwzS5jjj2Lg7y'%20on%20twitter%3B%0Aset%20oauth_token_secret%3D'D6ewAzsueTzQmrAJGFH0phV5zgWT88FOtcMeqW4YeI'%20on%20twitter%3B%0A%0Aselect%20*%20from%20twitter.status.timeline.friends%3B&amp;diagnostics=true&amp;env=store%3A%2F%2Fderekgathright.com%2Foauthdemo">Results</a>)</p>

<p>Well there you have it, an example of how to hide your consumer key pair, which now allows you to use YQL as your server-side proxy as opposed to writing &amp; maintaining your own!</p>

<p><strong>A Pure JS Twitter Client is Born</strong></p>

<p>When I started at Yahoo, I wanted an excuse to learn YUI3 and expand my knowledge of YQL. So porting my jQuery/PHP based Twitter client seemed like a logical choice. The result of this work is an open-source project I call <a href="http://github.com/derek/Tweetanium">Tweetanium</a>. I&rsquo;m not going to argue it is the most polished or feature-rich Twitter client. In fact, it is quite buggy, and will likely always be that way. It&rsquo;s just something I toy around with occasionally to try out new things. But feel free to use it if you like. You can play around in it at <a href="http://tweetanium.net">tweetanium.net</a>.</p>

<p>As proof that there is no server-side JS, you can even use <a href="http://derek.github.com/Tweetanium/docroot/">a version of it</a> hosted on Github Pages, which is a static file host (no PHP, Ruby, Python, etc&hellip;). Hosting off Github Pages was a neat test for it, which basically proves you can host JS-only apps on commodity hosting. If you actually need to process data externally, you can use YQL tables for any APIs on the web, even your own custom-built ones (See: <a href="http://developer.yahoo.com/yql/guide/yql-opentables-chapter.html">YQL Open Data Tables</a>). Any scaling bottlenecks have now been offloaded to Github and Yahoo. The best part about this solution? It&rsquo;s free!</p>

<p>Post some comments if you have questions.</p>

<p><strong>UPDATE:</strong> A few people have asked, &ldquo;<em>But can&rsquo;t I execute YQL queries with your consumer keys now?</em>&rdquo; The answer is, yes. But that isn&rsquo;t as bad as you think because you only have half of the keys necessary. You are missing the unique keys assigned to a user on behalf of my application, and without those, you cannot make authenticated calls. If you get those, well&hellip; there&rsquo;s a whole other security issue of you having physical access to their computer or man-in-the-middle attacks.</p>

<p>&ldquo;<em>Ok, but can&rsquo;t I authenticate new keys posing as your app?</em>&rdquo; To my knowledge, Twitter does not currently support the oauth_callback parameter, which allows the requester to Twitter to redirect the user to the URL of their choice. So if EvilHacker tries to authenticate InnocentUser using my consumer keys, InnocentUser will just be directed back to my app&rsquo;s preset URL stored in Twitter&rsquo;s database. In the future, who knows how the OAuth spec, or Twitter&rsquo;s implementation of it, will change. This is mostly a proof-of-concept hack at this point.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crockford on JavaScript]]></title>
    <link href="http://derek.github.io/blog/2010/crockford-on-javascript-part-1/"/>
    <updated>2010-02-21T03:08:46-08:00</updated>
    <id>http://derek.github.io/blog/2010/crockford-on-javascript-part-1</id>
    <content type="html"><![CDATA[<div><object width="576" height="324"><param name="movie" value="http://d.yimg.com/m/up/ypp/default/player.swf"></param><param name="flashVars" value="vid=17880750&"></param><param name="allowfullscreen" value="true"></param><param name="wmode" value="transparent"></param><embed width="576" height="324" allowFullScreen="true" src="http://d.yimg.com/m/up/ypp/default/player.swf" type="application/x-shockwave-flash" flashvars="vid=17880750&"></embed></object></div>


<p>I just finished watching Part 1 of Douglas Crockford&rsquo;s ongoing lecture series on JavaScript, and it&rsquo;s fascinating stuff.  A must watch for any programmer.  Even if you don&rsquo;t code in JS, it&rsquo;s worth watching simply because this first part is all about the history of programming. (video of talk is below)</p>

<p>As web developers, we spend anywhere from a little bit of our time to the majority of it coding in JavaScript, but few know the history behind the language.  I&rsquo;m not talking about just reading the Wikipedia article and knowing that it was created by Brenden Eich at Netscape in &lsquo;95, I&rsquo;m talking about the history of where the ideas behind the language came from and everything that influenced it.  Like most every language, JavaScript&rsquo;s syntax and style didn&rsquo;t appear out of nowhere, it was influenced by a number of different languages, and those influencers were in turn also influenced by a slew of languages.<a id="more"></a><a id="more-665"></a>It&rsquo;s easy for those of us that started programming with C (or anything after) to just look at it as the &ldquo;Alpha&rdquo; language and ignore everything that happened before it, but that&rsquo;s missing a lot of really important history, that we, as professionals, should know.  It&rsquo;s like a politician in the United States just ignoring everything that happened before 1776.  Learn from the mistakes of the past and spot the trends going forward and pave the best path.  Crockford shows us snippets of languages that were created in the 60&rsquo;s and 70&rsquo;, dissects them, and explains why certain people thought they were good ideas at the time.  It&rsquo;s amazing to think that there was a time before modules or functions, or before we had figured out the best way to format a <em>for</em> loop.  The history of programming languages is littered with a ton of bad ideas, but occasional brilliant ideas.  Those brilliant ideas are what get refined, and lay the foundation in the next generation of languages.</p>

<p>Finally, one concept he goes back to over and over that I found really interesting is that programmers are a <strong>very</strong> stubborn breed.  We all know this.  There&rsquo;s little point to all our flame wars on which language or framework is better, and most of it comes from either insecurity or ignorance.  He says it takes a long time for us to evolve, and he&rsquo;s right.  It&rsquo;s not because new ideas aren&rsquo;t coming along all the time, but it&rsquo;s because the adoption of new ideas only take place at each generation shift, when  the &ldquo;old&rdquo; thinkers get replaced those with few preconceived notions.  The world didn&rsquo;t wake up one day and realize that GOTO statements were bad, it&rsquo;s that those who supported GOTO and argued for it for a decade finally retired.  Out with the old, in with the new.  That&rsquo;s evolution.</p>

<p>Anyways, I could go on and on about all the &ldquo;Ah hah!&rdquo; moments in this talk, but you really need to watch it for yourself. I&rsquo;ll probably chime in again after part 2, which I&rsquo;m probably going to watch right now.  I&rsquo;m excited.  It&rsquo;s like a sequel.  &ldquo;Ooo! What happens now?!&rdquo;</p>

<p>Also, here&rsquo;s the &ldquo;Mother of all Demos&rdquo; video he mentions about halfway through.</p>

<div align="center">
<embed id=VideoPlayback src=http://video.google.com/googleplayer.swf?docid=-8734787622017763097&hl=en&fs=true style=width:400px;height:326px allowFullScreen=true allowScriptAccess=always type=application/x-shockwave-flash> </embed></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Prom King]]></title>
    <link href="http://derek.github.io/blog/2006/i-won-prom-king/"/>
    <updated>2006-04-08T02:56:59-07:00</updated>
    <id>http://derek.github.io/blog/2006/i-won-prom-king</id>
    <content type="html"><![CDATA[<p>Thanks to my date Lisa, as well as Sarah (Prom Queen) and her date for making the Second Chance Prom an awesome night.  And thanks to everyone out there for your support over the last few weeks.  Its been a ton of fun.</p>

<p>Well the fun isn&rsquo;t over yet, Sarah and my prize for being King &amp; Queen?  We each get a 7-day trip for two later on this month to the all inclusive Riu Caribe resort..</p>

<p>Works has to hate me though, hah.  17 days off in a matter of 30 days so I can go to Europe and Cancun.  Feel pretty guilty about that.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I'm in 96.5's "Prom Court"]]></title>
    <link href="http://derek.github.io/blog/2006/im-in-96-5-the-buzz-2nd-chance-proms-prom-court/"/>
    <updated>2006-03-25T02:55:03-08:00</updated>
    <id>http://derek.github.io/blog/2006/im-in-96-5-the-buzz-2nd-chance-proms-prom-court</id>
    <content type="html"><![CDATA[<p>I sent an email at to the buzz last week saying they should select me for one of the male contestants for the prom court, and got a call yesterday telling me I&rsquo;m in!  I guess they are going to call me Monday (the 27th) during the morning show (9:10 AM) to do some sort of an interview or something, the woman didn&rsquo;t really know what exactly was going on.</p>

<p>From what I gather about the &ldquo;prom court&rdquo;, they take a handful of guys and some girls too, put them in a bracket where they face off against one another.  The winners are announced prom king &amp; queen.</p>

<p>Here we go!</p>
]]></content>
  </entry>
  
</feed>
