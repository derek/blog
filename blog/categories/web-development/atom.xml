<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Web Development | Scribbles and Bits]]></title>
  <link href="http://derek.github.io/blog/blog/categories/web-development/atom.xml" rel="self"/>
  <link href="http://derek.github.io/blog/"/>
  <updated>2014-05-17T18:13:40-07:00</updated>
  <id>http://derek.github.io/blog/</id>
  <author>
    <name><![CDATA[Derek Gathright]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Creating an API Service With YQL]]></title>
    <link href="http://derek.github.io/blog/2011/creating-an-api-service-with-yql/"/>
    <updated>2011-09-22T13:20:28-07:00</updated>
    <id>http://derek.github.io/blog/2011/creating-an-api-service-with-yql</id>
    <content type="html"><![CDATA[<p>I spent a few days last week in New York City at Yahoo&rsquo;s <a href="http://developer.yahoo.com/blogs/ydn/posts/2011/09/yahoo-open-hack-all-stars-in-new-york-city/">Open Hack All-stars event</a>.  At this hack day, I was mentoring a team of 3 students from the University of Texas who set out to create a hack that allows you to control a media experience on your TV by using your iPad.</p>

<p>For this hack, they needed to talk to search APIs from 4 different services (Youtube, Justin.tv, Flickr, Netflix), parse the results, and display a thumbnail for each item with a link to play/view it.  Traditionally, this would be a rather bulky iPad application where you&rsquo;d have to include all the code and logic to communicate with the various JSON, XML, &amp; ATOM service APIs, parse the results, combine them, and finally render the content.  Likely, the HTTP calls would be synchronous, which would certainly present some issues as you get to 5+ APIs and you have to wait for one response to return before making the next.</p>

<p>Alternatively, you could create an API service that will do all of this for you.  When that option was presented, I immediately realized YQL would be perfect for this task.  Why?<br /></p>

<ul>
<li>It can communicate with any HTTP-based APIs, asyncronously, so your response time is always as fast as the slowest API you have to talk to</li>
<li>Use custom JavaScript to parse the results and form the return set</li>
<li>Reduces the number of requests your client makes to a single HTTP request</li>
</ul>


<p>So, I strapped on the headphones and began coding.  A few hours later, <a href="http://derek.github.com/sandbox/hackallstars/mediasearch.xml">here&rsquo;s the result</a>.  It&rsquo;s YQL <a href="http://developer.yahoo.com/yql/guide/yql-opentables-chapter.html">datatable</a> that heavily uses the &lt;execute&gt; feature, which allows you to run arbitrary JavaScript.  Within &lt;execute&gt;, you get a simple library that allows you to do things like parse JSON, make HTTP calls, and create XML structures with <a href="http://en.wikipedia.org/wiki/ECMAScript_for_XML">E4X</a>.  The datatable code is pretty straight-forward really.  <em>Here&rsquo;s the service to talk to, the URLs to send the search query to, and the callback to parse each result set. Now go!</em></p>

<p>The beauty of this YQL datatable is that you have now created a fully-functional high-performance API server without the need for a server of your own to run it on.</p>

<p>Here&rsquo;s a JSFiddle of the script in action.  Click the play button to see the combined search results.</p>

<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/9S3UK/embedded/"></iframe>


<p>You can also toy around with the query in the YQL console <a href="http://y.ahoo.it/lDld8">here</a>.</p>

<p>If you are interested in learning more fun stuff you can do with YQL, here&rsquo;s another post, <a href="http://derek.io/blog/2010/how-to-secure-oauth-in-javascript/">How-to: Secure OAuth in JavaScript</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning JavaScript]]></title>
    <link href="http://derek.github.io/blog/2011/learning-javascript/"/>
    <updated>2011-07-20T23:43:25-07:00</updated>
    <id>http://derek.github.io/blog/2011/learning-javascript</id>
    <content type="html"><![CDATA[<p>So you want to learn JavaScript huh? I can&rsquo;t blame you, it&rsquo;s a pretty rad programming language.  Well lucky for you, it&rsquo;s a really easy language to pick up and learn.  You can get started with the language without spending a penny on a compiler, an IDE, or any instructional material.  Heck, you already have a computer capable of running JavaScript.  I know that because every modern web browser has one, and that&rsquo;s how you are viewing this blog post.</p>

<p>I&rsquo;m approaching this post as an introduction to JavaScript for someone who is already a programmer (novice or advanced, doesn&rsquo;t matter).  An introduction to programming would be an entirely different post.</p>

<p>Without further adieu&hellip;</p>

<h2>Tip #1: Start by Reading the Wikipedia Entry</h2>


<p>Yeah, we&rsquo;re really swinging for the fences now, this is a tough one.  You&rsquo;ll find that entry <a href="http://en.wikipedia.org/wiki/JavaScript">here</a>. Read it, thoroughly.  It&rsquo;s really helpful to get some background information on the language, the history, and various implementations of it.  It&rsquo;s helpful to understand that JavaScript is a standardized language, with many &ldquo;<a href="http://en.wikipedia.org/wiki/JavaScript_engine">engines</a>&rdquo; available to execute your code.  There&rsquo;s no single company behind the language.  Also, forget that JavaScript has anything to do with Java.  It doesn&rsquo;t.  It was just a horrible name for a language that wasn&rsquo;t supposed to be very useful. Well, it turns out it was, and we all accept that it&rsquo;s a horrible name and have moved on. C'est la vie.</p>

<h2>Tip #2: Learn it Outside of a Browser!!!</h2>


<p>I&rsquo;m going to assume you have some experience with another programming language.  Odds are likely it is PHP, Ruby, or Python.  Those are all scripting languages, which means it isn&rsquo;t compiled prior to runtime, instead it is read by an interpreter and executed on the fly.  Well, JavaScript works the same way, there&rsquo;s no compilation step you have to do prior to running a program.  So, <a href="http://nodejs.org/#download">download Node.js</a> and start writing some basic scripts.  At this moment, Node.js only runs on OSX and Linux, so if you are running Windows, then ok&hellip; You can either visit <a href="http://jsbin.com/">jsbin.com</a> or use the JavaScript console that comes built in to Chrome.  Windows support for Node.js is coming soon though (late-summer 2011).</p>

<p>The reason I say learn it outside of a web browser is because you should approach JavaScript just like you would any other programming language.  Only focus on its standard library to start. If you start toying with it in a web browser, you all of a sudden have access to the DOM and the BOM APIs, and then you&rsquo;ll be distracted by learning HTML, CSS, which will likely be frustrating and lead you to a library like jQuery or YUI.  Just don&rsquo;t do it.  Once you get comfortable with the syntax, scoping, and prototypal nature of the language, then proceed to use it inside of a web application.</p>

<h2>Tip #3: Read Some Books</h2>


<p>I highly recommend <a href="http://eloquentjavascript.net/">Eloquent JavaScript</a> to start, because it&rsquo;s a great book, and it&rsquo;s free! After that, check out a few other of my favorites; <a href="http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742/ref=sr_1_1?s=books&ie=UTF8&qid=1311226701&sr=1-1">The Good Parts</a>, <a href="http://www.amazon.com/Performance-JavaScript-Faster-Application-Interfaces/dp/059680279X/ref=sr_1_1?s=books&ie=UTF8&qid=1311226709&sr=1-1">High Performance JavaScript</a>, and <a href="http://www.amazon.com/Pro-JavaScript-Techniques-John-Resig/dp/1590597273/ref=sr_1_1?s=books&ie=UTF8&qid=1311226775&sr=1-1">Pro JavaScript Techniques</a>.  You can buy them all used off of Amazon for under $15 each.</p>

<h2>Tip #4: Watch some videos</h2>


<p>The <a href="http://developer.yahoo.com/yui/theater/">YUI Theater</a> is an excellent resource for anything front-end related.  Some of it is focused on YUI, but there are quite a few videos that are just about JavaScript in general.  The <a href="http://yuiblog.com/crockford/">Crockford on JavaScript</a> lecture series is amazing.  Must watch!</p>

<p>Another video I came across recently was Alex Russell&rsquo;s talk at Google.io 2011, &ldquo;<a href="http://www.youtube.com/watch?v=seX7jYI96GE">Learning to Love JavaScript</a>&rdquo;.  It is probably the best introduction presentation to the language I&rsquo;ve seen.</p>

<h2>Tip #5: Get Involved in the Community</h2>


<p>JavaScript meetup groups are popping up in every major city around the world, and there are many major JS-related conferences/events every year.  Go to <a href="http://www.meetup.com/">Meetup.com</a> and search for &ldquo;JavaScript&rdquo; in your area.  Attend a meetup, meet some fellow nerds, and ask them about their learning experiences with JavaScript.  Don&rsquo;t see one in your area? Create one! <a href="http://www.meetup.com/socaljs">I did</a>, <a href="http://groups.google.com/group/kcjug/">twice</a>.</p>

<p>If you really get into it, attend <a href="http://jsconf.us/">JSConf.us</a> or <a href="http://jsconf.eu">JSConf.eu</a>.  They are the best JS-related conferences out there.</p>

<p>If you are anti-social and don&rsquo;t want to get out and meet people, don&rsquo;t worry, there&rsquo;s a large community on-line as well.  You can find us in #javascript on Freenode IRC.  I usually hang out there (user: dgathright), as well as #yui, #jquery, #node.js, #html5, and many others.  If you see me on there, ping me and let me know you saw this post and I&rsquo;ll give you an internet high-five.  Also, join the <a href="http://jsmentors.com/">JSMentors mailing list</a>.  Its whole purpose is to help newbies like you learn the language we love.</p>

<h2>Tip #6: Ignore W3Schools!</h2>


<p>There is a plethora of ancient JavaScript tip sites that haven&rsquo;t been updated in 10+ years.  They often contain horrible, and sometimes incorrect, examples of JavaScript code.  Instead, visit the Mozilla Developer Network&rsquo;s <a href="https://developer.mozilla.org/en/JavaScript">JavaScript</a> documentation.  W3Schools is so bad, it even spurred <a href="http://w3fools.com/">W3Fools.com</a>.</p>

<h2>Tip #7: Be Curious</h2>


<p>There are more discussions about JavaScript and code posted per day than time you have to actually read it.  That means there is an unlimited supply of information out there about the language, seek it out.</p>

<p>&mdash;</p>

<p>Well, those are the tips that immediately come to mind.  There&rsquo;s quite a few more ideas, blog posts, tools, resources, services, etc&hellip; that I&rsquo;d love to recommend, but you have more than enough to get started.  Now go get coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Npm on webOS 2.0]]></title>
    <link href="http://derek.github.io/blog/2010/installing-npm-on-webos/"/>
    <updated>2010-11-28T02:30:15-08:00</updated>
    <id>http://derek.github.io/blog/2010/installing-npm-on-webos</id>
    <content type="html"><![CDATA[<p><img class="alignright" title="NPM + webOS" src="http://s89997654.onlinehome.us/screencaps/Photoshop-20101125-233609.jpg" alt="NPM + webOS" width="268" height="187" /> Now that webOS 2.0 ships with Node.js, one of the first things I tried to do when I got the webOS 2.0 SDK a while back was get <a href="http://npmjs.org/">npm</a> installed.  While successful, it took a little bit of work, so figured it was worth a post to help aid anyone else trying to get it installed.  For those that aren&rsquo;t familiar with npm, it is a package manager for Node.js (<strong>N</strong>ode <strong>P</strong>ackage <strong>M</strong>anager).  In short, it&rsquo;s a easiest way to get Node.js modules installed on your system.  It is Node&rsquo;s equivalent to Ruby&rsquo;s Gems, Ubuntu&rsquo;s APT, PHP&rsquo;s PEAR, and Perl&rsquo;s CPAN.  So instead of manually downloading libraries/modules, explicitly including them in your source code, and having to manually resolve dependency issues, you can just let npm handle that for you.  Now, installing a new module is as easy as typing <strong><code>npm install &lt;module&gt;</code></strong>.  The version of Node.js that webOS 2.0 ships with (at the moment) is v0.1.102, which is rather old.  The build scripts for the latest npm installer does not work with older versions of Node.js, so with trial and error, the most recent version I&rsquo;ve been able to install on webOS 2.0 is npm v0.1.23.  Luckily it&rsquo;s pretty easy to install that specific version, so here&rsquo;s how you do it on your webOS device.</p>

<script src="https://gist.github.com/708091.js"></script>


<p>If you are looking for a list of packages, check out <a href="http://npm.mape.me/"><a href="http://npm.mape.me/">http://npm.mape.me/</a></a>. Or, you can just type <strong><code>npm ls</code></strong>.  Are there any plans for npm to be included in webOS? HP/Palm engineers confirmed at the webOS Developer Day event a few weeks ago that there are no plans for npm to ship with webOS.  That&rsquo;s fine with me.  Modules should be included in the application package anyways.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[High Performance JavaScript (Book Review)]]></title>
    <link href="http://derek.github.io/blog/2010/book-review-high-performance-javascript-part-1/"/>
    <updated>2010-09-08T00:44:48-07:00</updated>
    <id>http://derek.github.io/blog/2010/book-review-high-performance-javascript-part-1</id>
    <content type="html"><![CDATA[<div style="float:right; padding:20px;"> <img src="http://covers.oreilly.com/images/9780596802806/lrg.jpg" width="200" /></div>


<p>When I saw on NCZ&rsquo;s blog that he was <a href="http://www.nczonline.net/blog/2010/02/09/announcing-high-performance-javascript/">writing a new book</a> on JavaScript performance techniques, I instantly went to pre-order it.  Having partially read through <em><a href="http://www.amazon.com/gp/product/059680279X?ie=UTF8&tag=deresblog-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=059680279X">High Performance JavaScript</a></em> by now, I figured I&rsquo;d start writing a review of this excellent book.</p>

<p>Since JavaScript is such an expressive language, there are dozens of different ways to do the same thing.  Some of them good, some mediocre, and a lot of them bad.  It&rsquo;s amazing how much awful JS info is on the web, all leftover from the dark ages of JS (&lsquo;96 &ndash; '05). Up until this point, we haven&rsquo;t had an authoritative source on the topic of how to write JavaScript that performs well, both in and out of the browser.  Sure we&rsquo;re had great books about web performance (<a href="http://www.amazon.com/gp/product/0596529309?ie=UTF8&tag=deresblog-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0596529309">High Performance Web Sites</a> is my favorite), but we haven&rsquo;t had anything specific to JavaScript.  Now we do.</p>

<p>Nicholas is widely known as one of the best minds in the JavaScript world today.  He joined Yahoo! in 2006 as a front end engineer and has been working on one of the most trafficked pages on the interwebs, the Yahoo! home page.  His blog (<a href="http://nczonline.net">nczonline.net</a>) is a treasure trove of information on all things JavaScript &amp; web performance.  Some recent gems include <a href="http://www.nczonline.net/blog/2010/01/05/interviewing-the-front-end-engineer/">Interviewing the front-end engineer</a> &amp; <a href="http://www.nczonline.net/blog/2009/12/15/writing-maintainable-code/">Writing maintainable code</a>.  It goes without saying that he knows his stuff when it comes to JavaScript &amp; performance.  As his books and blog posts have shown, he&rsquo;s also a very skilled technical writer, keeping topics fresh, concise, &amp; relevant.</p>

<p>I&rsquo;m writing this as I read along, so the verbosity of this post is due to me taking reference notes on interesting things as I go.
<a id="more"></a><a id="more-769"></a></p>

<hr />




<h2>Chapter 1: Loading & Execution</h2>


<p>Nick doesn&rsquo;t waste any time getting into what the reader wants, fresh tips! Right away we begin to learn the specifics of how browsers react depending on where &amp; how you include your JS.  There are many ways that work, but few ways that work <strong>well</strong>.</p>

<p>Specifically:</p>

<ul>
<li>Why is it important to put your &lt;script&gt; includes just above the closing &lt;/body&gt; tag?</li>
<li>What is the browser doing while loading those external files?</li>
<li>Why should you put all your in-page JS code <strong>above</strong> your CSS includes? <em>(A: If you put it after a &lt;/link&gt; tag referencing an external stylesheet, the browser will block execution while waiting for that stylesheet to download)</em></li>
<li>How you can use the <em>defer</em> attribute in &lt;script&gt; tags to delay non-essential execution of code.</li>
<li>A thorough look at dynamic script loading to import & execute your JS without blocking the browser.</li>
<li>An overview of some of the common JS loaders used today (YUI3, LazyLoader, & LABjs).</li>
</ul>


<p>While much of the content in this chapter contains common knowledge among experienced developers, it is important knowledge to cover as it serves as the foundation for the rest of the book.  Don&rsquo;t worry, we&rsquo;ll get more advanced.</p>

<hr />




<h2>Chapter 2: Data Access</h2>


<p>Here&rsquo;s where the sexy parts come into play; diagrams, graphs, and benchmarks!  This second chapter is where you&rsquo;ll learn about how exactly the JS engine accesses data depending on how you store it.  The steepest learning curve within JavaScript for beginning developers is understanding variable scope.  This is the first time I&rsquo;ve ever come across an explanation of JavaScript&rsquo;s <a href="http://www.jibbering.com/faq/faq_notes/closures.html#clScCh">[[Scope]]</a> property, now all the scoping &amp; speed issues make perfect sense!</p>

<p>Major topics covered in this chapter:</p>

<ul>
<li>Why do global variables perform so slowly?</li>
<li>Why creating data as local variables as opposed to object properties is 10%-50% faster (depending on the browser).</li>
<li>Why is it a good idea to create local instances of global variables?</li>
<li>Why <em>with</em>, <em>try/catch</em>, and <em>eval</em> are bad ideas from a performance perspective. (<em>A: they augment the scope by inserting themselves first on the tree</em>)</li>
<li>What truly happens under the hood when a variable is found to be <em>undefined</em>?</li>
<li>Closure scope and why they can cause memory leaks.</li>
<li>How prototype's work and performance issues related to traversing up the prototype chain.</li>
<li>Why is it bad to use deeply nested object members (i.e. foo.bar.baz.bop())?</li>
</ul>


<p>There were so many &ldquo;Ah hah! I get it now!&rdquo; moments in this chapter for me that it alone was worth the price of the book.  It took me about 5x as long as it should have to get through this chapter because I was too busy playing with Firebug as I began to learn some of these concepts.</p>

<hr />




<h2>Chapter 3: DOM Scripting</h2>


<p>This book contains a few guest author chapters, and this is one of them.  In this chapter we learn about DOM scripting by another Yahoo, Stoyan Stefanov.</p>

<p>Many web developers don&rsquo;t understanding what exactly &ldquo;DOM scripting&rdquo; is, even though they likely do it on a daily basis.  Many could tell you what the acronym stands for and that it represents the structure of an (X)HTML/XML document, but most don&rsquo;t know that it also represents the API part of how you interact with the document.  When you are using <em>document.getElementById(&ldquo;foobar&rdquo;)</em> or <em>myelement.style.color = &ldquo;blue&rdquo;</em>, you are utilizing a DOM API function accessible via JavaScript, but it has nothing to do with the ECMAScript (aka: JavaScript) standard.</p>

<p>This chapter is chalk-full of great best practices &amp; overviews of DOM principles.  The first thing we learn is that accessing the DOM is so slow because we&rsquo;re crossing the bridge between JavaScript and native browser code.  Jumping between the two is expensive, and should be kept to a minimum.  There are a lot of tricks &amp; tips that are very under-utilized by most developers when DOM scripting.</p>

<p>For example:</p>

<ul>
<li>Using the non-standard <em>innerhtml</em> is way faster than creating nodes via the native <em>document.createElement()</em> method.</li>
<li>When looping through a NodeCollection you should cache the length of the node in a local variable because it's own <em>length</em> property is very slow.</li>
<li>Iterating through <em>nextSibling()</em> can be 100x faster than using <em>childNodes()</em></li>
</ul>


<p>This chapter also goes into a detailed explanation of what repaint &amp; reflow are, when they occur, and how understanding them will improve your application performance.  The realization I had after reading the R&amp;R explanation is we do stupid stuff all the time simply because we don&rsquo;t understand how the browser renders and updates our pages.  You know how you&rsquo;ve always heard using <em>margin-left</em> &amp; <em>margin-right</em> as separate styles is a bad idea? Well, here you find out why.  Oh, and did you know there was a <em>cssText</em> property you can use to batch your CSS modifications? I didn&rsquo;t.</p>

<p>As JS libraries get more &amp; more popular, knowledge of good DOM scripting is becoming increasingly rare.  Take event delegation for example. Many developers just presume jQuery&rsquo;s <em>live()</em> or YUI3&rsquo;s <em>delegate()</em> methods are just magic.  They&rsquo;re far from it, and are actually easy to understand concepts. When interviewing candidates for front end jobs at Yahoo!, this is one of the primary concepts we expect candidates to understand.  They may have never used it, but the good ones will figure it out as they are whiteboarding and we walk them through the challenges.</p>

<p>JS libraries are awesome, but it&rsquo;s because they abstract out the cross-browser differences &amp; fix a flawed language, not because they allow you to forget what it actually going on under the hood.</p>

<hr />




<h2>Chapter 4: Algorithms & Flow Control</h2>


<p>Chapter 4 kicks off with a quick overview of the 4 different types of loops in JavaScript (<em>while</em>, <em>do-while</em>, <em>for</em>, <em>for-in</em>).  The first 3 have equivalent performance, but <em>for-in</em> is the one to watch out for and should only be used when iterating an unknown number of elements (i.e. object properties). We then learn about important concepts like length caching and various other optimization techniques focused on reducing the number of operations per iteration.</p>

<p>Next up are conditionals, such as <em>if-else</em> and <em>switch</em>.  We learn when it is appropriate to use each one, and when they can be ditched for a much faster method, like using arrays as lookup tables.</p>

<p>Finally we come to the topic of recursion.  We skip the basics of &ldquo;What is recursion&rdquo; and jump straight into browser limitations with call stacks and advanced recursion topics such as memoization to cut out the fat in your stack.</p>

<p>Since the majority of our time spent coding is inside of loops, conditionals, and (if we really want to optimize) recursion, this chapter has great, basic information on efficient shortcuts that will set you apart from the other developers on your team.  Techniques learned in this chapter extend beyond the scope of JavaScript and can be used in just about every other programming language.</p>

<hr />




<h2>Chapter 5: Strings and Regular Expressions</h2>


<p><em>Another guest author chapter, this time by regex guru Steve Levithan</em></p>

<p>Along with loops, another very common task in JavaScript is string manipulation, most commonly one by concatenation or regular expressions, so it makes sense to have a whole chapter to itself.</p>

<p>When most people start out with JS, their concatenation method is likely <em>var str = &ldquo;foo&rdquo;; str = str + &ldquo;bar&rdquo;; //str = &ldquo;foobar&rdquo;</em>, then they discover the += operator and it becomes <em>var str = &ldquo;foo&rdquo;; str += &ldquo;bar&rdquo;; //str = &ldquo;foobar&rdquo;</em>.  It turns out that one of those is more efficient when it comes to memory usage, and it happens to not be the latter.  This chapter provides some memory allocation table diagrams to explain the difference and how different browsers perform that operation. It should also be noted that another alternate method of concatenation, <em>[&lsquo;foo&rsquo;,&lsquo;bar&rsquo;].join(&lsquo;&rsquo;);</em> is the preferred method in IE 6 &amp; 7, so that should be considered depending on your userbase.</p>

<p>The second half of this chapter covers regular expressions, which usually make me cringe. I have no problem writing them, but they&rsquo;re an absolute nightmare to maintain sometimes.  Douglas Crockford has a saying, &ldquo;If a regular expression is longer than 2 inches, find another method.&rdquo;  I couldn&rsquo;t agree more.</p>

<hr />


<p>In this review, I only covered the first half of the book.  Here are the remaining chapters:</p>

<ul>
<li>Chapter 6: Responsive Interfaces</li>
<li>Chapter 7: Ajax</li>
<li>Chapter 8: Programming Practices</li>
<li>Chapter 9: Building and Deploying high performance JavaScript applications</li>
<li>Chapter 10: Tools</li>
</ul>


<p>If you like what you&rsquo;ve seen so far, <a href="http://www.amazon.com/Performance-JavaScript-Faster-Application-Interfaces/dp/059680279X">go buy it</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node-yql]]></title>
    <link href="http://derek.github.io/blog/2010/node-yql/"/>
    <updated>2010-03-06T15:29:04-08:00</updated>
    <id>http://derek.github.io/blog/2010/node-yql</id>
    <content type="html"><![CDATA[<div align="center" style="float:left; padding:20px;"><img src="http://farm3.static.flickr.com/2601/3858500752_9c3a39e4af.jpg" height="200" /></div>


<p>The more I play around with <a href="http://nodejs.org/">Node.js</a>, the more I love server-side JavaScript.  Once you get over the weirdness of writing JavaScript outside of the browser, it feels very natural.  And the bonus is that it is blazing fast.</p>

<p>Also, as I&rsquo;ve been playing around with <a href="http://developer.yahoo.com/yql/">YQL</a> (Yahoo Query Language) more lately, I realized I wanted to be able to access YQL data from within my Node app.  So, I created a <a href="http://github.com/drgath/node-yql">node-yql </a> module.</p>

<p>Now you can do something like&hellip;</p>

<div style="clear:both"></div>


<pre lang="javascript">
YQL.get("SELECT * FROM weather.forecast WHERE location=90066", function(response) {
    
    var location  = response.query.results.channel.location,
        condition = response.query.results.channel.item.condition;
    
    sys.puts("The current temperature in " + location.city + " is " + condition.temp + " degrees");
});
// Output: The current temperature in Los Angeles is 57 degrees
</pre>



]]></content>
  </entry>
  
</feed>
