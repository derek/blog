<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Scribbles and Bits]]></title>
  <link href="http://derek.github.io/blog/atom.xml" rel="self"/>
  <link href="http://derek.github.io/blog/"/>
  <updated>2014-05-17T18:13:40-07:00</updated>
  <id>http://derek.github.io/blog/</id>
  <author>
    <name><![CDATA[Derek Gathright]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[YUI Benchmark]]></title>
    <link href="http://derek.github.io/blog/2013/yui-benchmark/"/>
    <updated>2013-11-25T17:15:25-08:00</updated>
    <id>http://derek.github.io/blog/2013/yui-benchmark</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/derek/yui-benchmark">YUI Benchmark</a> is a new toolkit for JavaScript performance testing. Despite &#8220;YUI&#8221; being in the name, it can be used for any type of JavaScript application, including vanilla JS, YUI, Dojo, jQuery, Node.js, and anything else you can think of. The project was something I was working on at Yahoo to help with YUI&#8217;s CI performance testing needs, and since its quiet open-sourcing a few weeks ago, I&#8217;ve <a href="http://derek.io/blog/2013/on-leaving-yahoo/">had some time</a> to clean it up, fix bugs, and introduce some new functionality.</p>




<p>Before we get into what it is, let&#8217;s first look at why it is useful.</p>




<h2>Prelude</h2>




<p>I believe the current state of JavaScript performance testing is a little inadequate. While there are certainly some developers who use tools like <a href="https://code.google.com/p/jslitmus/">JSLitmus</a>, <a href="http://benchmarkjs.com/">Benchmark.js</a>, or manual profiling to gather performance metrics, most don&#8217;t actively test performance of their code. Instead, most developers write performant code to the best of their ability and call it a day. I don&#8217;t think this is due to lack of interest in the idea. Rather, I just think it is due to a lack of flexible and easy-to-use tools. For instance, <a href="http://jsperf.com/">JSPerf.com</a> is awesome at what it does, but due to it being web-only, its usefulness is a bit limited. What about developers who want the ease of JSPerf, but want something command-line driven? Perhaps in a CI environment? Benchmark.js is handy, but it requires lots of boiler-plate for browser-testing as well as a custom test runner for integration into CI. Shouldn&#8217;t this be easier?</p>




<p>We went through this before. If you look back 5+ years, few JavaScript developers were unit testing their JavaScript code. Even some of the popular JS libraries weren&#8217;t shipping fully tested code. We first started with <a href="http://jsunit.berlios.de">JsUnit</a>, then came <a href="http://yuilibrary.com/yui/docs/test/">YUI Test</a>, <a href="http://qunitjs.com/">QUnit</a>, <a href="http://pivotal.github.io/jasmine/">Jasmine</a>, <a href="http://visionmedia.github.io/mocha/">Mocha</a>, <a href="http://vowsjs.org/">Vows</a>, and a variety of others. As the number of available tools grew, so did our acceptance of the idea that our code needed to be rock-solid stable. Now, often times the only way to deploy code is through <a href="http://en.wikipedia.org/wiki/Continuous_integration">continuous integration</a> systems (such as <a href="http://jenkins-ci.org/">Jenkins</a>, <a href="https://travis-ci.org/">Travis CI</a>) that run your code through a gauntlet of unit tests. Heck, a few weeks ago I was talking to a fellow developer and he said <em>&#8220;Know when code can be considered &#8216;legacy&#8217;? When it isn&#8217;t unit tested.&#8221;</em></p>




<p>Our priorities, expectations, and workflows have changed since 2008. So with JavaScript unit testing now a mostly solved problem, I think we can now turn our attention to the problem of performance testing. If this field is of interest to you, here&#8217;s a tool that can probably help you out.</p>




<h2>What is YUI Benchmark?</h2>




<p>Think of YUI Benchmark as the glue that combines <a href="http://nodejs.org/">Node.js</a>, <a href="http://benchmarkjs.com/">Benchmark.js</a>, <a href="http://phantomjs.org/">Phantom.js</a>, <a href="http://yeti.cx/">Yeti</a>, and was designed around the workflow of YUI developers and CI testing environments. To dive in a bit more, it is a Node.js application that utilizes Benchmark.js to measure performance of a given function in various environments, including Node.js and web browsers.</p>




<p>Here&#8217;s a quick demo executing <a href="https://github.com/derek/yui-benchmark/blob/master/examples/vanilla.js">this simple test</a>.</p>




<pre><code>// vanilla.js - A test suite to compare array creation
var suite = new PerfSuite({
    name: 'Simple test',
    tests: [
        {
            name: 'new Array()',
            fn: function () {
                var arr = new Array();
            }
        },
        {
            name: '[]',
            fn: function () {
                var arr = [];
            }
        }
    ]
});
</code></pre>




<p><img src="http://i.imgur.com/ZI941MA.gif" alt="YUI Benchmark demo" /></p>




<p>The idea is that you provide simple performance tests (<a href="https://github.com/derek/yui-benchmark/blob/master/examples/">examples</a>), which contain only the code you want to test performance for, and you get to forget all the boiler-plate code. YUI Benchmark will read your test file, then compile it to either a <code>.html</code> file (for browser testing) or a <code>.js</code> file (for Node.js testing), execute it in the environment(s) of your choice, then dump the human readable results to the command-line or a raw JSON file. Flexible, and simple.</p>




<p>Bonus features include the ability to test in multiple browsers at the same time (thanks Yeti!), as well as multi-version testing for development on the YUI project. In addition to built-in support for YUI, it also offers the ability to test jQuery and Dojo as well. Here&#8217;s <a href="https://github.com/derek/yui-benchmark/blob/master/examples/yui-jquery-dojo.js">an example</a> of that.</p>




<p>So that&#8217;s the quick intro. I could go into more details here, but it would be duplicating much of the details and demos that can be currently found in the <a href="https://github.com/derek/yui-benchmark/blob/master/README.md">README</a>. So go check that out for more information on the project and details on how to get started. <em>(Hint: <code>npm install -g yui-benchmark</code>)</em></p>




<h2>Roadmap?</h2>




<p>YUI Benchmark is still a young project and has only been used in YUI&#8217;s CI system as well as a few select developers. While the feedback so far has been great, there&#8217;s probably still some rough edges to iron out. So aside from improving stability and usability, I&#8217;d love to eventually add some features to the project so it can realize it&#8217;s full potential. Here&#8217;s a few ideas&#8230;</p>




<ul>
<li><p><strong>Generalize multi-version testing for all projects, not just YUI</strong>. Multi-version support is valuable in performance testing because duplicating testing conditions for comparative analysis when results are gathered sometimes months apart, is not ideal. It&#8217;s often times far easier to execute tests against select versions of your code in the same test run and compare your results.</p></li>
<li><p><strong>Machine state intelligence</strong>. I believe this is the most exciting aspect of an application like this. With the possibility of YUI Benchmark code executing in the client and server <em>while</em> your performance tests are executing, insight can be gathered about the state of your machine and factored into test results. Did your CPU max during testing? Are you swapping memory? Are your objects leaking? Any of these problems could be detected to inform the user that the results are less than ideal.</p></li>
<li><p><strong>Phantom.js cluster support</strong>. Currently tests are run serially, one after another, after another, after another. If your project is like YUI, you can have dozens of tests suites containing hundreds of test cases, and at approx 6 seconds per test, this pretty quickly fails to scale. One solution could be to farm out the test files to phantom.js clusters on low-powered VMs so the tests could be run synchronously. Important to note that while <em>performance</em> testing on low-powered VMs seems counter-intuitive, it&#8217;s important to realize that this type of testing is comparative, not discrete. The key metric you are looking for <strong>is not</strong> how many operations per second your code ran, instead, it is how much faster it ran than your other result.  Also, I&#8217;d target &#8220;low-powered VMs&#8221; because that is commonly what you get in CI environments.</p></li>
<li><p><strong>Introduce threshold support to trigger regression/failure in CI</strong>. Currently multi-version results require manual analysis to determine if your code is regressing. It isn&#8217;t possible to always trigger a failure if your test is running slower due to the fact that swings of +/- 5% are not uncommon. My suspicion is this will require the introduction of a threshold to accommodate highly variable tests. In the future, more intelligence can be used to compare against historical deltas and automate the process of determining the regression threshold value.</p></li>
<li><p><strong>More intelligent analysis of gathered statistics</strong>. Any performance testing toolkit should provide accurate and detailed statistics so the developer can make the most informed decision for appropriate fixes. Currently, YUI Benchmark simply relays the statistics Benchmark.js calculates, but greater analysis can be done with multiple <code>--iterations</code> to expunge outliers and re-execute the suite.</p></li>
<li><p>And more!</p></li>
</ul>




<p>Thanks for reading this, and I look forward to your <a href="https://github.com/derek/yui-benchmark/issues">feedback</a> and <a href="https://github.com/derek/yui-benchmark/pulls">contributions</a>!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leaving Yahoo]]></title>
    <link href="http://derek.github.io/blog/2013/on-leaving-yahoo/"/>
    <updated>2013-11-07T16:47:00-08:00</updated>
    <id>http://derek.github.io/blog/2013/on-leaving-yahoo</id>
    <content type="html"><![CDATA[<p>A week ago I walked out of Building E for the last time. There are a lot of emotions as I reflect back on everything that has happened over the last 4 years <a href="http://derek.io/blog/2009/im-a-yahoo">since I joined</a>, the jubilant successes, the lesson-learning failures, and everything in between. I have to think that in the end, it will likely go down as one of the more fun and rewarding periods of my life.</p>




<h2>Some highlights&#8230;</h2>




<ul>
<li>Attending, speaking, and mentoring hackers at <a href="http://derekgathright.com/resume/#conferences">27 conferences</a>. The YDN crew is world-class, and despite all the free food and nice benefits, working with them is one of the best perks of being an engineer at Yahoo. At least I think so. Special thanks to Anil, Havi, and Stacy for all their support at Hackdays, and helping organize SoCal meetups.</li>
<li>I feel fortunate to have been around for the beginning stages of what everyone hopes will be Yahoo’s &#8220;big turnaround&#8221;. We probably won’t know for another 2 or 3 years if it will ultimately succeed, but the changes made in the first 18 months have been exciting to witness. While I don’t envision myself taking over a struggling Fortune 500 company anytime soon, learning some lessons for what it takes to turn that ship around been invaluable. Communicate, set goals, accomplish, repeat. Simple, right? We&#8217;ll find out.</li>
<li>I also feel fortunate to have had the unique opportunity to work on <a href="http://yuilibrary.com/">a project</a> that reaches, what&#8230; 1/7th of the Earth&#8217;s population in a given month? Kinda mindblowing when you think about it. And to top it off, you get to do it while working with a really talented and passionate group of people.</li>
<li>It was especially great being able to see the insides of how to effectively manage a large open-source project. Since YUI is on a never-ending quest to open up as much as possible, looking back on where it was in 2009 compared to now is pretty remarkable. Some of that praise should of course be given to Github, for producing such an amazing product for open-source organizations and letting developers focus on developing. The entire culture around open-source has evolved greatly in the last few years, and I think YUI has responded remarkably well.</li>
<li>Hacks! Especially ones with YQL. Between things like the <a href="https://github.com/yahoo/yql-executor">YQL Executor</a>, <a href="http://derek.io/blog/2010/how-to-secure-oauth-in-javascript/">Secure OAuth in JavaScript</a>, hacking YUI inside of YQL, SoCal Hackdays, Hacker Movie Nights, late-night scripting competitions with Dan Beam, and my projects from internal Hackdays, Yahoo absolutely cultivates the hacker mentality. I couldn&#8217;t tell you if Paul Graham was right about Yahoo&#8217;s <a href="http://www.paulgraham.com/yahoo.html">dead hacker culture</a> in 1998, but it certainly doesn&#8217;t apply in 2013. Let a thousand hacks bloom! (as one of my hack-discuss memos once said)</li>
<li>The Purple Kitten Tracker. One of these days, purple kittens will make an appearance in URLs, and it will be glorious.</li>
<li>Y! Sports Karaoke. <a href="http://www.youtube.com/watch?v=izGwDsrQ1eQ">I&#8217;ll just leave this here</a>.</li>
<li>But most of all, the biggest highlight was simply setting a career goal, <a href="http://derek.io/blog/2010/return-to-sunnyvale">accomplishing it</a>, then <a href="http://derek.io/blog/2011/joining-yui">again</a>.</li>
</ul>




<h2>To conclude&#8230;</h2>




<p>It was a pleasure to work with so many smart and passionate people, which was the entire reason <a href="http://derek.io/blog/2011/the-best-career-advice-youll-ever-get">why I joined Yahoo</a>. If you are the smartest person in the room and not the CEO, go find a smarter room. If you are working for a company that doesn’t believe in you, it’s time for a change. Ultimately, your career is about you, and the best way to succeed is to have the support of a company that can help you reach your goals. Yahoo gave me an immense amount of support over the years, and I&#8217;ll always be grateful. So thanks to my managers Michael, Dan, Thomas, and Jenny.</p>




<h2>What’s Next?</h2>




<p>Believe it or not, in my four years at Yahoo I only took one vacation. So, I&#8217;m going to spend a few months off, Hawaii next week, travel more after that, hack on new projects, contribute to open-source, and eventually find my next adventure! If you are interested in speaking to me about opportunities, you can <a href="http://www.linkedin.com/in/derekgathright">connect with me on LinkedIn</a>, and find any other relevant links at <a href="http://derek.io/">derek.io</a>.</p>




<p>Well Yahoo&#8230; So long, and thanks for all the fish!</p>




<div align="center">
  <img height="300" src="http://i.imgur.com/rJVteIv.jpg" />
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating an API Service With YQL]]></title>
    <link href="http://derek.github.io/blog/2011/creating-an-api-service-with-yql/"/>
    <updated>2011-09-22T13:20:28-07:00</updated>
    <id>http://derek.github.io/blog/2011/creating-an-api-service-with-yql</id>
    <content type="html"><![CDATA[<p>I spent a few days last week in New York City at Yahoo&rsquo;s <a href="http://developer.yahoo.com/blogs/ydn/posts/2011/09/yahoo-open-hack-all-stars-in-new-york-city/">Open Hack All-stars event</a>.  At this hack day, I was mentoring a team of 3 students from the University of Texas who set out to create a hack that allows you to control a media experience on your TV by using your iPad.</p>

<p>For this hack, they needed to talk to search APIs from 4 different services (Youtube, Justin.tv, Flickr, Netflix), parse the results, and display a thumbnail for each item with a link to play/view it.  Traditionally, this would be a rather bulky iPad application where you&rsquo;d have to include all the code and logic to communicate with the various JSON, XML, &amp; ATOM service APIs, parse the results, combine them, and finally render the content.  Likely, the HTTP calls would be synchronous, which would certainly present some issues as you get to 5+ APIs and you have to wait for one response to return before making the next.</p>

<p>Alternatively, you could create an API service that will do all of this for you.  When that option was presented, I immediately realized YQL would be perfect for this task.  Why?<br /></p>

<ul>
<li>It can communicate with any HTTP-based APIs, asyncronously, so your response time is always as fast as the slowest API you have to talk to</li>
<li>Use custom JavaScript to parse the results and form the return set</li>
<li>Reduces the number of requests your client makes to a single HTTP request</li>
</ul>


<p>So, I strapped on the headphones and began coding.  A few hours later, <a href="http://derek.github.com/sandbox/hackallstars/mediasearch.xml">here&rsquo;s the result</a>.  It&rsquo;s YQL <a href="http://developer.yahoo.com/yql/guide/yql-opentables-chapter.html">datatable</a> that heavily uses the &lt;execute&gt; feature, which allows you to run arbitrary JavaScript.  Within &lt;execute&gt;, you get a simple library that allows you to do things like parse JSON, make HTTP calls, and create XML structures with <a href="http://en.wikipedia.org/wiki/ECMAScript_for_XML">E4X</a>.  The datatable code is pretty straight-forward really.  <em>Here&rsquo;s the service to talk to, the URLs to send the search query to, and the callback to parse each result set. Now go!</em></p>

<p>The beauty of this YQL datatable is that you have now created a fully-functional high-performance API server without the need for a server of your own to run it on.</p>

<p>Here&rsquo;s a JSFiddle of the script in action.  Click the play button to see the combined search results.</p>

<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/9S3UK/embedded/"></iframe>


<p>You can also toy around with the query in the YQL console <a href="http://y.ahoo.it/lDld8">here</a>.</p>

<p>If you are interested in learning more fun stuff you can do with YQL, here&rsquo;s another post, <a href="http://derek.io/blog/2010/how-to-secure-oauth-in-javascript/">How-to: Secure OAuth in JavaScript</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning JavaScript]]></title>
    <link href="http://derek.github.io/blog/2011/learning-javascript/"/>
    <updated>2011-07-20T23:43:25-07:00</updated>
    <id>http://derek.github.io/blog/2011/learning-javascript</id>
    <content type="html"><![CDATA[<p>So you want to learn JavaScript huh? I can&rsquo;t blame you, it&rsquo;s a pretty rad programming language.  Well lucky for you, it&rsquo;s a really easy language to pick up and learn.  You can get started with the language without spending a penny on a compiler, an IDE, or any instructional material.  Heck, you already have a computer capable of running JavaScript.  I know that because every modern web browser has one, and that&rsquo;s how you are viewing this blog post.</p>

<p>I&rsquo;m approaching this post as an introduction to JavaScript for someone who is already a programmer (novice or advanced, doesn&rsquo;t matter).  An introduction to programming would be an entirely different post.</p>

<p>Without further adieu&hellip;</p>

<h2>Tip #1: Start by Reading the Wikipedia Entry</h2>


<p>Yeah, we&rsquo;re really swinging for the fences now, this is a tough one.  You&rsquo;ll find that entry <a href="http://en.wikipedia.org/wiki/JavaScript">here</a>. Read it, thoroughly.  It&rsquo;s really helpful to get some background information on the language, the history, and various implementations of it.  It&rsquo;s helpful to understand that JavaScript is a standardized language, with many &ldquo;<a href="http://en.wikipedia.org/wiki/JavaScript_engine">engines</a>&rdquo; available to execute your code.  There&rsquo;s no single company behind the language.  Also, forget that JavaScript has anything to do with Java.  It doesn&rsquo;t.  It was just a horrible name for a language that wasn&rsquo;t supposed to be very useful. Well, it turns out it was, and we all accept that it&rsquo;s a horrible name and have moved on. C&#8217;est la vie.</p>

<h2>Tip #2: Learn it Outside of a Browser!!!</h2>


<p>I&rsquo;m going to assume you have some experience with another programming language.  Odds are likely it is PHP, Ruby, or Python.  Those are all scripting languages, which means it isn&rsquo;t compiled prior to runtime, instead it is read by an interpreter and executed on the fly.  Well, JavaScript works the same way, there&rsquo;s no compilation step you have to do prior to running a program.  So, <a href="http://nodejs.org/#download">download Node.js</a> and start writing some basic scripts.  At this moment, Node.js only runs on OSX and Linux, so if you are running Windows, then ok&hellip; You can either visit <a href="http://jsbin.com/">jsbin.com</a> or use the JavaScript console that comes built in to Chrome.  Windows support for Node.js is coming soon though (late-summer 2011).</p>

<p>The reason I say learn it outside of a web browser is because you should approach JavaScript just like you would any other programming language.  Only focus on its standard library to start. If you start toying with it in a web browser, you all of a sudden have access to the DOM and the BOM APIs, and then you&rsquo;ll be distracted by learning HTML, CSS, which will likely be frustrating and lead you to a library like jQuery or YUI.  Just don&rsquo;t do it.  Once you get comfortable with the syntax, scoping, and prototypal nature of the language, then proceed to use it inside of a web application.</p>

<h2>Tip #3: Read Some Books</h2>


<p>I highly recommend <a href="http://eloquentjavascript.net/">Eloquent JavaScript</a> to start, because it&rsquo;s a great book, and it&rsquo;s free! After that, check out a few other of my favorites; <a href="http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742/ref=sr_1_1?s=books&ie=UTF8&qid=1311226701&sr=1-1">The Good Parts</a>, <a href="http://www.amazon.com/Performance-JavaScript-Faster-Application-Interfaces/dp/059680279X/ref=sr_1_1?s=books&ie=UTF8&qid=1311226709&sr=1-1">High Performance JavaScript</a>, and <a href="http://www.amazon.com/Pro-JavaScript-Techniques-John-Resig/dp/1590597273/ref=sr_1_1?s=books&ie=UTF8&qid=1311226775&sr=1-1">Pro JavaScript Techniques</a>.  You can buy them all used off of Amazon for under $15 each.</p>

<h2>Tip #4: Watch some videos</h2>


<p>The <a href="http://developer.yahoo.com/yui/theater/">YUI Theater</a> is an excellent resource for anything front-end related.  Some of it is focused on YUI, but there are quite a few videos that are just about JavaScript in general.  The <a href="http://yuiblog.com/crockford/">Crockford on JavaScript</a> lecture series is amazing.  Must watch!</p>

<p>Another video I came across recently was Alex Russell&rsquo;s talk at Google.io 2011, &ldquo;<a href="http://www.youtube.com/watch?v=seX7jYI96GE">Learning to Love JavaScript</a>&rdquo;.  It is probably the best introduction presentation to the language I&rsquo;ve seen.</p>

<h2>Tip #5: Get Involved in the Community</h2>


<p>JavaScript meetup groups are popping up in every major city around the world, and there are many major JS-related conferences/events every year.  Go to <a href="http://www.meetup.com/">Meetup.com</a> and search for &ldquo;JavaScript&rdquo; in your area.  Attend a meetup, meet some fellow nerds, and ask them about their learning experiences with JavaScript.  Don&rsquo;t see one in your area? Create one! <a href="http://www.meetup.com/socaljs">I did</a>, <a href="http://groups.google.com/group/kcjug/">twice</a>.</p>

<p>If you really get into it, attend <a href="http://jsconf.us/">JSConf.us</a> or <a href="http://jsconf.eu">JSConf.eu</a>.  They are the best JS-related conferences out there.</p>

<p>If you are anti-social and don&rsquo;t want to get out and meet people, don&rsquo;t worry, there&rsquo;s a large community on-line as well.  You can find us in #javascript on Freenode IRC.  I usually hang out there (user: dgathright), as well as #yui, #jquery, #node.js, #html5, and many others.  If you see me on there, ping me and let me know you saw this post and I&rsquo;ll give you an internet high-five.  Also, join the <a href="http://jsmentors.com/">JSMentors mailing list</a>.  Its whole purpose is to help newbies like you learn the language we love.</p>

<h2>Tip #6: Ignore W3Schools!</h2>


<p>There is a plethora of ancient JavaScript tip sites that haven&rsquo;t been updated in 10+ years.  They often contain horrible, and sometimes incorrect, examples of JavaScript code.  Instead, visit the Mozilla Developer Network&rsquo;s <a href="https://developer.mozilla.org/en/JavaScript">JavaScript</a> documentation.  W3Schools is so bad, it even spurred <a href="http://w3fools.com/">W3Fools.com</a>.</p>

<h2>Tip #7: Be Curious</h2>


<p>There are more discussions about JavaScript and code posted per day than time you have to actually read it.  That means there is an unlimited supply of information out there about the language, seek it out.</p>

<p>&mdash;</p>

<p>Well, those are the tips that immediately come to mind.  There&rsquo;s quite a few more ideas, blog posts, tools, resources, services, etc&hellip; that I&rsquo;d love to recommend, but you have more than enough to get started.  Now go get coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Best Career Advice You'll Ever Get]]></title>
    <link href="http://derek.github.io/blog/2011/the-best-career-advice-youll-ever-get/"/>
    <updated>2011-07-06T21:02:34-07:00</updated>
    <id>http://derek.github.io/blog/2011/the-best-career-advice-youll-ever-get</id>
    <content type="html"><![CDATA[<p>The Huffington Post just posted an interview with Marissa Mayer (<a href="http://www.huffingtonpost.com/2011/07/06/google-marissa-mayer-women-in-tech_n_891167.html"><em>&ldquo;Google Exec Marissa Mayer Explains Why There Aren&rsquo;t More Girl Geeks&rdquo;</em></a>) in which she explained why she chose Google over 13 other companies she had job offers from out of college.</p>

<blockquote><em>&#8220;Work with the smartest people you can find, do something you&#8217;re not ready to do, find an environment in which you&#8217;re very comfortable so you can find your voice, and work for someone who believes in you &#8211; because when they believe in you, they&#8217;ll invest in you.&#8221;</em></blockquote>


<p>I couldn&rsquo;t agree more.  For some people, that&rsquo;s Google or Facebook.  For others, that is a startup.  For me, that encompasses every reason why I&rsquo;m at Yahoo.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Splitt]]></title>
    <link href="http://derek.github.io/blog/2011/splitt/"/>
    <updated>2011-06-10T16:23:21-07:00</updated>
    <id>http://derek.github.io/blog/2011/splitt</id>
    <content type="html"><![CDATA[<p>Growing up in Kansas City, I spent quite a few summer afternoons at Royals games.  My grandparents had season tickets, front row, just next to the home dugout.  Amazing seats.  It pretty much felt like you were on the field.  As much as I love some of my other teams, there&rsquo;s a certain connection you have with your baseball team.  I suspect that is largely due to the fact that they play just about every night, 162 games per season.  If you are a fan, you are in it for the long-haul.  It takes commitment.</p>

<p>Royals fans are a great bunch.  I&rsquo;ll always view Kansas City as a baseball town, no matter how good the Chiefs are any given season.  That&rsquo;s especially remarkable considering the fact that we&rsquo;ve only had a single winning season since we won the World Series.  FYI, that championship happened 25 years ago, if you didn&rsquo;t know.  Us Royals fans know.  It&rsquo;s always in the back of our minds as we hover around the .500 mark anytime after April. &ldquo;This is the year, we&rsquo;re gonna do it!&rdquo; is what we think.  Most fans say that about winning the division.  Not us.  We just want 82 wins in one year, a winning season. Just once, and then we&rsquo;ll build from there.  Baby steps.  Progress.</p>

<p>Over the stretch of a 162 game season, most baseball fans will watch or listen to dozens and dozens of games.  There&rsquo;s a connection you feel with the guys in the booth, a one-way bond that is developed over hundreds of hours of listening to their narrative.  I can literally hear the Royals announcers in my head as I write this and make their voices say anything I want.  I know them that well.  Their catch phrases.  Their quirks.  Their jokes.  I feel like I&rsquo;ve known them my whole life, yet never met them once.  I&rsquo;m not even sure I&rsquo;d recognize them if seen in person, but I could recognize their voice from across a crowded room.</p>

<p>Tuesday night, one of our announcers lost a battle with cancer.  When the news came out last week that Paul &ldquo;Splitt&rdquo; Splitorff was ill, the rumors swirled that he had less than a week to live.  It was a shock.  We all suspected he wasn&rsquo;t in great health, but no one thought it was something this bad.  Less than a month ago he was calling a game.  Two weeks ago he was doing the Royals postgame show.  People don&rsquo;t just&hellip; go like that.  Do they?</p>

<p>Unfortunately, yes.</p>

<p>As I watched the Royals vs Baltimore game the day of his passing, the Royals TV broadcast observed an inning of silence for a man who gave 2/3s of his life to the organization.  He was one of the first players drafted by the new expansion Royals in 1968, and pitched wearing royal blue all 16 years until his retirement.  After his retirement, he began an even longer 24-year career as a broadcaster with the team.</p>

<p>He wasn&rsquo;t the greatest pitcher the team ever had, but he still holds the record for most won games.  He wasn&rsquo;t the greatest announcer the game has seen, but he was ours.  He was mine.  He was a constant.  Every night you know you can turn on the ball game and listen to the same guys call a game.</p>

<p>Broadcasters are special.  So much has changed in your life, but they&rsquo;re still doing the exact same thing they were decades before.  The day you graduated high school, they were calling a Royals game.  The day you got married, they were calling a game.  The day you had your first child, they called a game.  The day your kids graduated high school, those same guys are calling yet another game from the exact same booth for the exact same team.</p>

<p>Inevitably though, change must occur, and the next generation is given their chance.  Sad that this time it happened sooner than it should have.</p>

<p>We&rsquo;ll miss you Splitt.</p>

<div align="center"><img src="http://www.nerdbaseball.com/wp-content/uploads/2009/08/splittorff-paul1.jpg"></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Planting Seeds]]></title>
    <link href="http://derek.github.io/blog/2011/planting-seeds/"/>
    <updated>2011-06-07T15:20:18-07:00</updated>
    <id>http://derek.github.io/blog/2011/planting-seeds</id>
    <content type="html"><![CDATA[<p>6 years and 6 months ago I was a recent college grad, unemployed, and recently fired from my computer sales job.  I was horrible at sales.  Not because I&rsquo;m not social and can&rsquo;t communicate, but because I always viewed myself as being on the side of the customer, not the employer.  &ldquo;<em>No, you don&rsquo;t need that, it&rsquo;s twice as expensive as this model, and you won&rsquo;t use most of the features.  Here, this one is a better fit for you. Actually, you probably don&rsquo;t even need this at all.</em>&rdquo;</p>

<p>Needless to say, sales managers don&rsquo;t really like that attitude.</p>

<p>So as a 24 year old (f)unemployed person, how do you spend your time? Trying to sell a professional sports team, of course.</p>

<p>Alright, that statement deserves a little explanation.  If you know me, you know I&rsquo;m a huge soccer fan. I&rsquo;d been attending Kansas City Wizards games since Major League Soccer&rsquo;s inception (1996) and was very involved in the KC team&rsquo;s supporters group.  Well, a few days after I was given a pink slip, on Dec 9th, 2004 the Wizards ownership group announced they had pretty much given up hope on the team and were putting it up for sale.  That was pretty devastating for us fans.  We knew there was little chance someone was going to come in and buy an MLS team in Kansas City.  If they did, they were buying it to move to another city.  There wasn&rsquo;t much hope in keeping our team, but we weren&rsquo;t going to lose it without a fight.</p>

<p>Being without a job, I had more than enough time to take the initiative and get the ball rolling.  I registered our name (Heart of America Soccer Foundation), wrote forum posts, sent out emails, made phone calls, hosted a wiki for us to organize, etc&hellip;  It was a busy time for a lot of us.  Within a few weeks, we were having meetings, internally, with politicians, and with potential ownership groups.  Our goal was to make the city and fanbase as attractive as possible to anyone interested in making a significant investment in the team.  We of course weren&rsquo;t the ones selling the team, but we could make a pretty convincing argument that Kansas City was the right home for whoever was buying it.  It was a collective voice that needed to be heard.</p>

<p>While we organized &amp; communicated mostly online, early-on we were without a website, so that needed to change.  Wordpress of today would have been perfect for the task, but this was 2004, so it was pretty unknown at the time and certainly wasn&rsquo;t as robust as it is now. I had built a few web sites before, dabbled in PHP, HTML, and CSS, but had never built anything too special and certainly nothing professional appearing. However, that didn&rsquo;t discourage me, and I was excited for the challenge of learning how to build the site from scratch.  Luckily, we had a talented designer in the group, so all I had to do was the coding.  Off I went.</p>

<p>Because of how much fun I was having building the HASF website, I started to have the confidence that maybe I could turn my long-time programming hobby into a career. Within a few weeks, I had my first interview for a web developer position at a local startup.  During that interview, I was asked all the typical questions, some technical, and some non-technical.  I was doing ok.  Well, maybe. My lack of professional experience was pretty evident, cause I had none.  Towards the end I was asked, &ldquo;<em>Do you have a website you&rsquo;ve built that you could show us?</em>&rdquo;</p>

<p>Luckily&hellip;</p>

<p>&ldquo;<em>Sure, I just built one a few weeks ago</em>&rdquo;, and we pulled up <a href="http://hoasoccer.org">hoasoccer.org</a> on the projector.</p>

<p>I was pretty proud of it, and they could tell as I enthusiastically talked about all the things I wanted to eventually do with it.</p>

<p>Later that night, I got a phone call, and a job offer.  Accepted!</p>

<p>As I ventured into a new career, my involvement with HASF had to take a backseat.  Oh, I was still involved, but I just didn&rsquo;t have enough time to spend the majority of each day as the COO of a grassroots organization. At that point, more qualified individuals took leadership roles and did an amazing job.  It was a long process, but on August 31st, 2006, the team was finally sold to a local ownership group for $20 million.  Mission accomplished!</p>

<p>Well, mission accomplished as far as HASF was concerned.  There was still a massive uphill battle for the new owners to get a stadium built for the team, ensuring its long-term home is Kansas City.  Luckily for them, some of those heavily involved with HASF joined the new ownership group filling a variety of roles. It&rsquo;s a very talented, passionate group of individuals.  While I worked on building my career, they continued on the journey to build a world-class soccer stadium right in the heartland, in Kansas City.  I was rooting for them every step of the way.</p>

<p>At the same time, in 2007 I was working as a developer at an advertising agency, and not having very much fun there. Jeff, a friend from HASF, emailed me one day about a meeting with a family friend of his who was working on a startup.  We heard the pitch, and the challenge was exciting.  I was in the process of buying my first home, so leaving a steady job and going month-to-month contract at a web startup was a pretty dumb idea. My mom disliked it, can&rsquo;t blame her.  But, I took it, and had an extremely satisfying 2.5 years there.  It even directly led to the <a href="http://derek.io/blog/2009/im-a-yahoo/">next chapter</a> in my career.</p>

<p>Fast forward to today, a journey that started on Dec 9th, 2004 is going to conclude on June 9th, 2011 with that first game at <a href="https://secure.wikimedia.org/wikipedia/en/wiki/Livestrong_Sporting_Park">LIVESTRONG Sporting Park</a>, home of Sporting Kansas City (formerly Kansas City Wizards).  That&rsquo;s 2,374 days of hard work one group of people have done to accomplish something uniquely special. I now live in Los Angeles, but am making the trip back for the first game in the new stadium this week. For myself, it&rsquo;s going to be pretty amazing walking into that stadium for the first time.  There&rsquo;s a personal connection.  But I can&rsquo;t even imagine what it will be like for those people who have been involved with every step of the process.</p>

<p>It boggles my mind to think what I&rsquo;d be doing if I didn&rsquo;t wake up one day and decide I wanted to help save a sports team.  If I don&rsquo;t co-found a non-profit organization that had nothing to do with technology, I likely don&rsquo;t get that first programming job at a startup.  If I don&rsquo;t work at that startup where I learned what it takes to build the engineering side of a company, I don&rsquo;t get the experience to actually lead the next startup.  Well, that next one is what directly led to where I am today and the <a href="http://derek.io/blog/2011/joining-yui/">new position</a> I&rsquo;ll be starting in a few weeks.</p>

<p>The takeaway from this story is that you need to be driven by your passions.  This stadium&rsquo;s story very likely could have happened without my involvement early on.  But the fun part is, it did happen with my involvment.  When you are motivated by things that you love, you&rsquo;ll make awesome things happen. Continually plant seeds for for the future, because eventually some of those seeds will turn into trees.</p>

<p>You never know, someday one of those trees might look like this&hellip;</p>

<div align="center">
<img width="620" src="http://s89997654.onlinehome.us/screencaps/livestrongpark-20110607-193725.jpg">
<img width="620" src="http://farm6.static.flickr.com/5029/5766503395_0aaed7a194_b.jpg">
<img width="620" src="http://i.imgur.com/jxdSpZV.jpg">

Photo credits:
Facade: Ramsey Mohsen - <a href="http://www.flickr.com/photos/33161367@N04/5766503681/sizes/l/in/photostream/">Flickr</a> 
Grass: <a href="http://www.flickr.com/photos/33161367@N04/5766503395/sizes/l/in/photostream/">Flickr</a>

</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Joining YUI]]></title>
    <link href="http://derek.github.io/blog/2011/joining-yui/"/>
    <updated>2011-06-05T22:10:06-07:00</updated>
    <id>http://derek.github.io/blog/2011/joining-yui</id>
    <content type="html"><![CDATA[<p>It seems like just yesterday I <a href="http://derek.io/blog/2009/im-a-yahoo/">accepted a position</a> with Yahoo and began a new adventure. These last 18 months have been an incredibly exciting time in my life, and am very thankful to have been given the opportunity. I can confidently say that Yahoo is -the- best place to work as a front-end engineer.</p>

<p>Well, the next chapter is about to begin.</p>

<p><img src="http://s89997654.onlinehome.us/screencaps/Twitter___%40Derek_Gathright__Exciting_day._Accepted_a_p_...-20110605-203607.jpg" alt="Tweet: Exciting day. Accepted a position with the YUI team at Yahoo. Yes, that means I'll be moving to NoCal. Watch out San Fran! I'm comin for ya." /></p>

<p><em>(Note: I&rsquo;ve since learned it is actually &ldquo;NorCal&rdquo;, not &ldquo;NoCal&rdquo;. Me = California noob.)</em></p>

<h2>What is YUI?</h2>


<p>YUI (mostly pronounced &ldquo;Y U I&rdquo;, sometimes &ldquo;Yooey&rdquo;) is an abbreviation for the <strong>Y</strong>ahoo <strong>U</strong>ser <strong>I</strong>nterface library. It&rsquo;s a project that began in 2005, and was open-sourced in 2006. It is primarily a JavaScript library, but also contains some CSS components as well (see: <a href="http://developer.yahoo.com/yui/grids/">Grids</a>, <a href="http://developer.yahoo.com/yui/reset/">Reset</a>). It is used extensively across just about every webpage Yahoo has, and it is popular externally as well.</p>

<p><a id="more"></a><a id="more-1030"></a></p>

<p>The reason we need JavaScript libraries is because web browsers have inconsistent implementations of the CSS &amp; ECMAScript (JavaScript) standards. Some browsers render something one way, while others do it in another way. We need to level the field and have a standard way to make stuff happen in the browser, so it&rsquo;s the job of the library to abstract out all the differences and give developers a sane way to make your browser do something.</p>

<p>You can read more about the concept on Wikipedia: <a href="https://secure.wikimedia.org/wikipedia/en/wiki/JavaScript_library">JavaScript Library</a>.</p>

<h2>Why is YUI awesome?</h2>


<p>Early on in my time at Yahoo, it became pretty clear to me that at some point in my career, I wanted to work for the YUI team. Here&rsquo;s why&hellip;</p>

<ul>
    <li>It&#8217;s an open-source project with a very liberal BSD license. Yay!</li>
    <li>It&#8217;s widely used both inside of Yahoo, and externally as well.</li>
    <li>It&#8217;s a very exciting time for JavaScript as it invades the server (thanks to projects like <a href="http://nodejs.org">Node.js</a>) and YUI runs amazingly well in a server environment. Better than any other full-featured JS library.</li>
    <li>YUI&#8217;s module system is one of the best out there. It allows you to create lean, fast, and portable applications.</li>
    <li>YUI is way more than just a DOM manipulation library, it is a platform for JavaScript applications. For that reason, I think YUI is in a great position to really make an impact as JavaScript is used in new &amp; innovative ways.</li>
    <li>It&#8217;s one of the most important projects Yahoo is working on and gets immense support from within the company. It even has its own <a href="http://yuilibrary.com/yuiconf2010/">conference</a>.</li>
    <li>The YUI team and the YUI community are equals. The YUI Gallery allows anyone to contribute to the collection of modules YUI can use, and we&#8217;ll even host the code for you.</li>
    <li>YUI has some of the brightest, and most passionate people in the industry working on the project. It&#8217;s an honor to be considered among them.</li>
</ul>


<p>If you read my post on <a href="http://derek.io/blog/2011/the-engineer/">the mentality of the engineer</a>, you&rsquo;ll know that I really appreciate a good challenge. Well, this is going to be one of the funnest, most exciting challenges of my career thus far. As I listened to the FLOSS Weekly podcast <a href="http://twit.tv/floss23">episode on YUI</a> back in 2008, if you told me I&rsquo;d one day be working on that project, I would have laughed in your face.</p>

<p>I have a ways to go before I feel I&rsquo;m at the level a YUI&#8217;er should be, but I can&rsquo;t wait to get started.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Engineer]]></title>
    <link href="http://derek.github.io/blog/2011/the-engineer/"/>
    <updated>2011-05-30T18:00:46-07:00</updated>
    <id>http://derek.github.io/blog/2011/the-engineer</id>
    <content type="html"><![CDATA[<p>According to <a href="http://en.wikipedia.org/wiki/Engineering">Wikipedia</a>, Engineering is&hellip;</p>

<blockquote><em>&#8220;&#8230;the discipline, art and profession of acquiring and applying scientific, mathematical, economic, social, and practical knowledge to design and build structures, machines, devices, systems, materials and processes that safely realize solutions to the needs of society.&#8221;</em></blockquote>


<p>This morning I was watching <a href="http://news.cnet.com/8301-13577_3-20023018-36.html">Carol Bartz&rsquo;s interview</a> at the Web 2.0 Summit, and John Battelle asked her the question about acquiring engineering talent in the software/web world. When he asked that question, I stopped what I was doing and focused on the conversation because it&rsquo;s important to me that our CEO understands what motivates us. If she doesn&rsquo;t &ldquo;get&rdquo; it, then the company has a serious problem. Here was her answer:</p>

<p>&ldquo;<em>[Engineers] want a really interesting job to do, they want to have the tools to do it, they want to work on large data sets and large problems, and [Yahoo] has that.</em>&rdquo;</p>

<p>Exactly what I wanted to here. And it&rsquo;s not just lip-service, there is really awesome stuff we&rsquo;re working on at the moment, things that haven&rsquo;t been done elsewhere, so it is clear she does get it.</p>

<p>Then, a theme began to emerge for the day. A friend that works in developer relations at HP/Palm tweeted&hellip;</p>

<p><a id="more"></a><a id="more-966"></a></p>

<p><img title="@adora: One of my greatest pleasures in life is giving developers interesting problems to solve" src="http://s89997654.onlinehome.us/screencaps/skitched-20101116-223758.jpg" alt="" /></p>

<p>And that&rsquo;s what makes <a href="http://twitter.com/adora">Lisa</a> great at what she does, she understands developers very well. She knows what makes us tick.</p>

<p>I work with an engineer (<a href="http://twitter.com/danbeam">@danbeam</a>) is so compulsive with solving problems that sometimes just to mess with him I&rsquo;ll say &ldquo;<em>I bet you can&rsquo;t figure this out</em>.&rdquo; I know that after 30 seconds of resisting, he has no choice but to drop everything and focus on solving it. Seriously, it works every time, it&rsquo;s pretty funny. We once spent hours battling back &amp; forth trying to generate the shortest shell script that will output every Friday the 13th. Why? Because it was Friday the 13th and we were curious. (Solution: <em>echo -e {$((2e5)).1}13\n|date -f-|grep ^F</em>)</p>

<p>I am obviously not immune to it myself. Recently, a friend sent me a link to the <a href="http://seatgeek.com/blog/hiring/henceforth-all-job-applicants-must-hack-into-our-backend">SeatGeek applicant hacking challenge</a>, I had no choice but to drop what I was doing and &ldquo;hack&rdquo; into the system even though I&rsquo;m happily employed. 15 minutes later, mission accomplished, back to work. It was fun for a few minutes, and I learned a couple things. (Tip: Try using nothing but cURL. Using a browser is cheating)</p>

<p>Solving these little problems is what keeps the engineer occupied. It is our form of entertainment. But if you are working with engineers, you don&rsquo;t want them to simply be entertained, you want them to be inspired. You want them so full of determination that they&rsquo;ll stop at nothing to figure out a solution. How do you do that? Give them something that isn&rsquo;t possible. That&rsquo;s like a mother telling her 13 year old son he can&rsquo;t do something. Oh yeah? Watch. (sorry mom!)</p>

<p>For instance, last year I wanted to figure out the best method to do OAuth using nothing but client-side JavaScript. It can&rsquo;t actually be impossible to do, can it? After a few weeks of hacking around, I came up with a solution and wrote a post about it, <a href="http://derek.io/blog/2010/how-to-secure-oauth-in-javascript/">How-to: Secure OAuth in JavaScript</a>. Yeah, it is using a proxy (YQL), but my code is all JS and I can host it anywhere. Close enough.</p>

<p>There was little practical reason for doing it, other than I just wondered how it could be done. There is a lot to learn by challenging yourself to do something you don&rsquo;t know how to do. The biggest lesson I learned from that project was to quit trying to coerce a library into doing something for you it wasn&rsquo;t intended to do. It&rsquo;s usually quicker to sack up, read the spec, and write a solution yourself. Me &amp; the <a href="http://oauth.net/core/1.0/">OAuth 1.0 spec</a> are like best buddies now.</p>

<p>Anyways, later on that same day, yet another relevant tweet rolled across my timeline&hellip;</p>

<p><img title="@BeOurGuestMike: #nasatweetup shows me each and every day how important it is to share with my students the passion of doing the once " src="http://s89997654.onlinehome.us/screencaps/Twitter___%40Mike_Rahlmann__%23nasatweetup_shows_me_each_...-20101116-224559.jpg" alt="" /></p>

<p>That, is an excellent teacher. I&rsquo;m a huge science nerd, and the NASA tweet reminded me of my favorite scene from Apollo 13. Yes, I&rsquo;m so nerdy that the scene where the engineers save the day is my favorite. In it, the crippled Lunar Module is flying back to Earth when engineers determine that the astronauts may soon die of carbon dioxide poisoning unless they devise a solution.</p>

<p>Here&rsquo;s the clip&hellip;</p>

<iframe src="http://www.youtube.com/embed/Z3csfLkMJT4" frameborder="0" width="560" height="349"></iframe>


<p>Those are the moments the engineer lives for. Solving interesting problems keep us occupied. Solving impossible problems is why we’re engineers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Shutting Down the Translate API]]></title>
    <link href="http://derek.github.io/blog/2011/google-translate/"/>
    <updated>2011-05-27T12:55:19-07:00</updated>
    <id>http://derek.github.io/blog/2011/google-translate</id>
    <content type="html"><![CDATA[<p>When I have conversations with people about what excites me in technology today, I usually start with the fact that the Web is breaking down barriers in a way we&rsquo;ve never experienced before.  It is simply amazing that anyone is free to publish anything they want whenever they want, and is it instantly available for global consumption.</p>

<p>Today, <a href="http://www.bulawayo24.com/index-id-news-sc-international-byo-966-article-More+than+2+billion+people+use+the+internet.html">2 billion people are on the internet</a>.  That means nearly a third of the world&rsquo;s population has access to Wikipedia, Google, Yahoo, Twitter, Facebook, etc&hellip;  The Web has finally given us the chance to globally communicate.  The only thing restricting us at this point isn&rsquo;t a technical barrier, but instead is a language barrier. Linguists estimate there are between 5,000-6,000 currently spoken languages on the planet.  Yet, very few of us speak more than one or two of those.  More than ever we need free &amp; accessible ways to easily translate between languages, allowing us to communicate with a global audience.</p>

<p>Since 2008, we&rsquo;ve have that.  The <a href="https://code.google.com/apis/language/translate/overview.html">Google Translate API</a>.  It&rsquo;s an API (application programming interface) that allows you to programmatically send text to Google, and they will translate it for you, for free.  It&rsquo;s an amazingly useful service that I have in <a href="http://tweenky.com">one of my Twitter clients</a> to instantly translate any tweets I can&rsquo;t read.</p>

<p>Sadly, yesterday they posted this message on the API&rsquo;s page.</p>

<blockquote><p>Important: The Google Translate API has been officially deprecated as of May 26, 2011. Due to the substantial economic burden caused by extensive abuse, the number of requests you may make per day will be limited and the API will be shut off completely on December 1, 2011. For website translations, we encourage you to use the Google Translate Element.</blockquote></p></blockquote>

<p>In other words&hellip; &ldquo;This is why we don&rsquo;t have nice things&rdquo;</p>

<p>Very disappointing, especially for a company who set out to &ldquo;Organize the World&rsquo;s Information&rdquo; a decade ago.  One would assume the goal of organizing is to make it accessible.  Guess not.</p>

<p>When Google implemented the <a href="http://www.w3.org/2005/Incubator/htmlspeech/2010/10/google-api-draft.html">Speech Input API</a> in Chrome, my mind instantly blew up with ideas.  I loved knowing that we were so close to having an application for your mobile device that allows you to say something, and it will instantly start translating it into text of any language.</p>

<p>Here&rsquo;s an example of how easy it could be.</p>

<pre>
&lt;html&gt;
    &lt;input type=&quot;text&quot; id=&quot;foo&quot; speech&gt;
    &lt;textarea id=&quot;translation&quot;&gt;&lt;/textarea&gt;
    &lt;script src=&quot;https://www.google.com/jsapi&quot;&gt;&lt;/script&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;
        function translate() {
            google.load(&quot;language&quot;, &quot;1&quot;);
            google.setOnLoadCallback(function() {
                var native_text     = document.getElementById(&#039;foo&#039;).value;
                var native_language = &quot;en&quot;; //english
                var target_language = &quot;es&quot;; //spanish
                google.language.translate(native_text, target_language, native_language, function(result) {
                    document.getElementById(&quot;translation&quot;).innerHTML = result.translation;
                });
            });
        }
        document.getElementById(&quot;foo&quot;).addListener(&quot;change&quot;, translate);
    &lt;/script&gt;
&lt;/html&gt;
</pre>


<p>You could solve a problem humans have had for thousands of years, in about 5 lines of JavaScript code.</p>

<p>Well, starting Dec 1st, 2011, you&rsquo;ll have to use another service.</p>

<p>There&rsquo;s no doubt in my mind we&rsquo;ll get this type of capability in the near future, I&rsquo;m just disappointed Google decided it didn&rsquo;t want to be involved in solving these kinds of real, human problems.</p>

<p>Hopefully Google reconsiders this decision. To help, go post a comment on the <a href="http://googlecode.blogspot.com/2011/05/spring-cleaning-for-some-of-our-apis.html">Google Code blog</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Twitter vs Ecosystem]]></title>
    <link href="http://derek.github.io/blog/2011/some-thoughts-on-twitter-vs-ecosystem/"/>
    <updated>2011-03-15T02:35:19-07:00</updated>
    <id>http://derek.github.io/blog/2011/some-thoughts-on-twitter-vs-ecosystem</id>
    <content type="html"><![CDATA[<p>So Twitter is once again in some hot water with their developer community.  After a well-intentioned, but poorly executed suggestion to their developer community that they stop working on developing clients and instead work on &ldquo;vertical&rdquo; ideas, the feedback they&rsquo;ve received has been less than ideal.  You can read the original post at &ldquo;<a href="http://groups.google.com/group/twitter-development-talk/browse_thread/thread/c82cd59c7a87216a/b63072f6aff82db0">consistency and ecosystem opportunities</a>&rdquo;, and some of the media coverage <a href="http://mashable.com/2011/03/12/twitter-api-clients/">here</a>, <a href="http://techcrunch.com/2011/03/11/twitter-ecosystem-guidelines/">here</a>, and <a href="http://thenextweb.com/twitter/2011/03/14/twitter-explains-why-developers-shouldnt-build-new-clients/">here</a>.</p>

<p>Some developers are understanding, others are irate, and many are still pretty confused about what exactly this all means.  I guess I&rsquo;d put myself in the 3rd (&ldquo;confused&rdquo;) group.  But I guess the one thing I do know, is that it is clear these &ldquo;suggestions&rdquo; and TOS updates are directed at UberMedia in order to prevent them from forking their portion of the Twitter user base.  But, now the rest of the community has now unfairly been dragged into the mix.</p>

<p>As someone who has been doing development on Twitter-related projects since 2007, I figured I&rsquo;d throw my 2 cents into the mix and give Twitter an idea of where they went wrong, and how they can fix it.  I figured it was worth a repost here on my blog.</p>

<p><a href="http://groups.google.com/group/twitter-development-talk/msg/34ae2fac254d1bac">Link to post.</a></p>

<blockquote>My 2 cents&#8230;

The reason for the perceived mixed messages for some of us is because many developers don&#8217;t, and never have been interested in doing Twitter development as a business.  I&#8217;ve created a dozen Twitter clients & apps over the last 5 years, some of which received enough users and press coverage that I could have attempted to turn it into a business, but I didn&#8217;t. Why? Because it doesn&#8217;t interest me. I do it for the challenge and the learning experience.

So, the things we hear Twitter saying are &#8220;Don&#8217;t build clients anymore&#8221; as well as &#8220;Client apps make bad business&#8221;.  Well, first, as long as the APIs are active and it&#8217;s not against the TOS, I&#8217;m still going to build, develop, and use my own clients.  Second, I don&#8217;t care that it makes &#8220;bad business&#8221;, that&#8217;s isn&#8217;t a concern to me.  Third, developers can determine for themselves what seems like a smart business decision or not.  Fourth, frankly, Twitter Inc has never been regarded as an expert in monetization strategies.

Plus, this is info we already knew.  For the most part, building a company whose main product is a Twitter client hasn&#8217;t been a good business decision for a few years (if ever, outside of a lucky few).  But on the other hand, there are still markets where it could be good business.  For example, where is the official Twitter client for webOS?  Messages like &#8220;Don&#8217;t build clients anymore&#8221; and no official Twitter app on webOS does nothing but hurt the ecosystem for thousands of users.  If I were a developer for one of the popular webOS clients, I&#8217;d be pretty pissed right now.  Heck, as a webOS user I&#8217;m not thrilled.  I&#8217;m sure this is applicable to other ecosystems too.

The point is, Twitter should be more vocal about what it is going to do as opposed to coy suggestions to developers (which some perceive as threats) about what they shouldn&#8217;t do.  Twitter is going to heavily focus on front-end user experiences across all platforms? Great! Leave it at that.  Let developers decide for themselves what are good/bad ideas.  Just arm us with the knowledge of your plans, and we&#8217;ll worry about our own.

Finally, Twitter, you should be excited to compete with your developers. Much of the innovation over the years has been a product of the developer & user community.  Things like mentions & hashtags came from your users.  Features like saved searches, lists, trends, and ajax driven clients were inventions of developers years before they made it into Twitter.com.  Essentially, &#8220;New&#8221; Twitter is just a compilation of the best features from all the 3rd party clients.  Do not be hostile.  Do not attack them with your TOS.  Do not suspend tokens without working with the developer first.  Doing these things hurts the community, which in turn hurts you.  Your users are your product.  Not your platform.  Not your website.  Not your ads.  Your users.

- @derek</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Npm on webOS 2.0]]></title>
    <link href="http://derek.github.io/blog/2010/installing-npm-on-webos/"/>
    <updated>2010-11-28T02:30:15-08:00</updated>
    <id>http://derek.github.io/blog/2010/installing-npm-on-webos</id>
    <content type="html"><![CDATA[<p><img class="alignright" title="NPM + webOS" src="http://s89997654.onlinehome.us/screencaps/Photoshop-20101125-233609.jpg" alt="NPM + webOS" width="268" height="187" /> Now that webOS 2.0 ships with Node.js, one of the first things I tried to do when I got the webOS 2.0 SDK a while back was get <a href="http://npmjs.org/">npm</a> installed.  While successful, it took a little bit of work, so figured it was worth a post to help aid anyone else trying to get it installed.  For those that aren&rsquo;t familiar with npm, it is a package manager for Node.js (<strong>N</strong>ode <strong>P</strong>ackage <strong>M</strong>anager).  In short, it&rsquo;s a easiest way to get Node.js modules installed on your system.  It is Node&rsquo;s equivalent to Ruby&rsquo;s Gems, Ubuntu&rsquo;s APT, PHP&rsquo;s PEAR, and Perl&rsquo;s CPAN.  So instead of manually downloading libraries/modules, explicitly including them in your source code, and having to manually resolve dependency issues, you can just let npm handle that for you.  Now, installing a new module is as easy as typing <strong><code>npm install &lt;module&gt;</code></strong>.  The version of Node.js that webOS 2.0 ships with (at the moment) is v0.1.102, which is rather old.  The build scripts for the latest npm installer does not work with older versions of Node.js, so with trial and error, the most recent version I&rsquo;ve been able to install on webOS 2.0 is npm v0.1.23.  Luckily it&rsquo;s pretty easy to install that specific version, so here&rsquo;s how you do it on your webOS device.</p>

<script src="https://gist.github.com/708091.js"></script>


<p>If you are looking for a list of packages, check out <a href="http://npm.mape.me/"><a href="http://npm.mape.me/">http://npm.mape.me/</a></a>. Or, you can just type <strong><code>npm ls</code></strong>.  Are there any plans for npm to be included in webOS? HP/Palm engineers confirmed at the webOS Developer Day event a few weeks ago that there are no plans for npm to ship with webOS.  That&rsquo;s fine with me.  Modules should be included in the application package anyways.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Secure OAuth in JavaScript]]></title>
    <link href="http://derek.github.io/blog/2010/how-to-secure-oauth-in-javascript/"/>
    <updated>2010-10-21T01:33:51-07:00</updated>
    <id>http://derek.github.io/blog/2010/how-to-secure-oauth-in-javascript</id>
    <content type="html"><![CDATA[<p>Wouldn&rsquo;t it be awesome if we could use OAuth in JavaScript-only apps? JS is a powerful, expressive programming language, and the browser engines are getting <a title="arewefastyet.com" href="http://arewefastyet.com/">faster and faster all the time</a>. Why not use JavaScript to conduct your API calls and parse your data? In many cases, it is unnecessary to maintain a server-side proxy if all it is doing is making API calls for you and hiding your OAuth keys.</p>

<p>Think about this&hellip; If you don&rsquo;t need any server-side processing, your applications suddenly become infinitely scaleable, right? We could host on the cheapest of cheap commodity hosting. Heck, if all we&rsquo;re doing is serving static HTML/CSS/JS files, just throw it on a CDN like S3 or CloudFiles and pay per GB.</p>

<p>Before you get too excited, realize that there is a fundamental problem with OAuth in JS. Because JavaScript in the browser is &ldquo;view-source&rdquo;, you are always forced to expose your consumer key pair, which compromises the security of your application. <em>sigh</em></p>

<p>For example, when Twitter recently deprecated their Basic Auth services, that left OAuth as the only authentication method. It was supposed to be <a title="OAuth-only Twitter: What it Means for JavaScript Apps" href="http://blog.programmableweb.com/2010/08/31/oauth-only-twitter-what-it-means-for-javascript-apps/">the death of JS-only Twitter apps</a>. This was unfortunate for quite a few developers who leveraged the browsers ability to do Basic auth, to help with scaling their Twitter apps. I know, I was one of them.</p>

<p>So then I began to think what if you weren&rsquo;t forced to expose your keys? What if your JS app could talk to any web API out there, in a secure, user-authenticated way?</p>

<p>Is that actually possible? Yup.</p>

<p><strong><a id="more"></a><a id="more-780"></a>Backstory</strong></p>

<p>Unknowingly at the time, my quest for a JS only OAuth app began two years ago.</p>

<p>When TechCrunch covered <a href="http://techcrunch.com/2008/07/24/tweenky-brings-gmails-good-looks-to-twitter/">the launch of my Twitter client</a>, the app pretty quickly died from the traffic they were sending my way. The problem is 90% of it was written in PHP and used a relational database to store waaaaaay to much data. Neither of them were designed to scale to 20k users in just a few minutes. After days of tweaking and optimizing, I finally gave up on the design. I realized I didn&rsquo;t need PHP to parse the data, or a database to host the data, so I began a rewrite with the goal of removing as much server-side code as possible. I threw away the database, moved off expensive EC2 and onto commodity hosting where it worked great for the next year or so with some occasional tweaking. As hard as I tried, I never thought I&rsquo;d be able to completely get rid of the backend because I needed a proxy to securely handle the OAuth requests to Twitter. &ldquo;That&rsquo;s ok, close enough&rdquo; I thought.</p>

<p>One day I was reading the Yahoo Query Language <a href="http://developer.yahoo.com/yql/guide/">documentation</a>, and I came across a section about using YQL&rsquo;s storage API to hide authentication info to be used in your queries. Ah ha! Could I actually use that for OAuth? I set to find out. I began learning the ins &amp; outs of OAuth, which includes reading <a href="http://tools.ietf.org/html/rfc5849">RFC 5849: The OAuth 1.0 Protocol</a> many, many times, and staring at the <a href="http://p2p.wrox.com/content/sites/default/files/users/17/image/figures%20ch6/531327%20f0602.png">OAuth Authentication Flow diagram</a> for loooooong time. By the end of the weekend, I had successfully modified my recently rewritten Twitter client&rsquo;s code-base (now YUI3 based) to remove all server-side programming.</p>

<p>Finally! A secure, pure JavaScript solution to OAuth.</p>

<p><strong>Some Prep Work</strong></p>

<p>So let&rsquo;s crack the code of what is necessary to do OAuth securely in JavaScript.</p>

<ul>
    <li>You cannot store your consumer keys inside your JS code. Not even obfuscated. But it has to be stored somewhere web-accessible so your JS code can talk to it.</li>
    <li>Because of the same-origin policy, that &#8216;somewhere&#8217; has to be the same domain as your JS app. Unless of course you only rely on HTTP GET, in which case you can do JSONP.</li>
    <li>Your storage location cannot transmit your consumer key pair back to you. So that means it needs to do the OAuth request on your behalf.</li>
</ul>


<p>So hmm&hellip;. what is web accessible, can talk to APIs, and also has data storage? YQL.</p>

<p><strong>Yahoo Query Language</strong></p>

<p><img style="float: left; margin: 0px 10px 10px 0px;" src="http://farm3.static.flickr.com/2601/3858500752_9c3a39e4af.jpg" alt="" width="100" /></p>

<p><a title="Yahoo Query Language" href="http://developer.yahoo.com/yql/">YQL</a> is an expressive SQL-like language that lets you query, filter, and join data across web servers. Along with YUI, it is by far my favorite product Yahoo has for developers. Both are simply amazing tools. I won&rsquo;t go into detail on the specifics of what YQL is in this post, and instead point you to slides from one of my recent talks on the subject <a href="http://drgath.github.com/talks/20101011_SoCaljs/index.html">here</a> (best viewed in Chrome). All you need to know for this post is that you can use it to access any web-accessible API. In the case of this post, we&rsquo;ll talk to the Twitter API.</p>

<p>So now that we know it is possible, let&rsquo;s see it in action.</p>

<p><strong>How It Works</strong></p>

<p>First let&rsquo;s take a look at how you would call your Twitter friends timeline via YQL w/ OAuth. Using my @derektest user, I created a new OAuth app at <a href="http://dev.twitter.com">dev.twitter.com</a> and used the keys it generated for my user/app combo to generate this YQL query.</p>

<pre lang="sql">SELECT * FROM twitter.status.timeline.friends
WHERE oauth_consumer_key = '9DiJt6Faw0Dyr61tVOATA'
AND oauth_consumer_secret = 'XBF9j0B2SZAOWg44QTu6fCwYy5JtivoNNpvJMs6cA'
AND oauth_token = '18342542-NkgUoRinvdJVILEwCUQJ3sL2CIm2ZwzS5jjj2Lg7y'
AND oauth_token_secret = 'D6ewAzsueTzQmrAJGFH0phV5zgWT88FOtcMeqW4YeI';</pre>


<p>So take that query, URL encode it, and throw it into a URL querystring. Like so&hellip;
<a href="https://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20twitter.status.timeline.friends%20where%20oauth_consumer_key%20%3D%20">https://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20twitter.status.timeline.friends%20where%20oauth_consumer_key%20%3D%20</a>&#8216;9DiJt6Faw0Dyr61tVOATA&#8217;%20AND%20oauth_consumer_secret%20%3D%20&#8217;XBF9j0B2SZAOWg44QTu6fCwYy5JtivoNNpvJMs6cA&#8217;%20AND%20oauth_token%20%3D%20&#8217;18342542-NkgUoRinvdJVILEwCUQJ3sL2CIm2ZwzS5jjj2Lg7y&#8217;%20and%20oauth_token_secret%20%3D%20&#8217;D6ewAzsueTzQmrAJGFH0phV5zgWT88FOtcMeqW4YeI&#8217;%3B&amp;diagnostics=true&amp;env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys</p>

<p>That unique URL will give you a list of the people @derektest follows (which is only @derek). You can play around with the query in the <a href="https://developer.yahoo.com/yql/console/?q=select%20*%20from%20twitter.status.timeline.friends%20where%20id%3D1972%3B&amp;env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys#h=select%20*%20from%20twitter.status.timeline.friends%20where%20oauth_consumer_secret%20%3D%20%27foo%27%20AND%20oauth_consumer_key%20%3D%20%27bar%27%20AND%20oauth_token%20%3D%20%27baz%27%20and%20oauth_token_secret%20%3D%20%27biz%27%3B">YQL Console</a>, or view the results in an <a href="https://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20twitter.status.timeline.friends%20where%20oauth_consumer_key%20%3D%20'9DiJt6Faw0Dyr61tVOATA'%20AND%20oauth_consumer_secret%20%3D%20'XBF9j0B2SZAOWg44QTu6fCwYy5JtivoNNpvJMs6cA'%20AND%20oauth_token%20%3D%20'18342542-NkgUoRinvdJVILEwCUQJ3sL2CIm2ZwzS5jjj2Lg7y'%20and%20oauth_token_secret%20%3D%20'D6ewAzsueTzQmrAJGFH0phV5zgWT88FOtcMeqW4YeI'%3B&amp;diagnostics=true&amp;env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys">XML feed</a>.</p>

<p>But there&rsquo;s a problem using that query, because? You guessed it, you&rsquo;ve exposed your consumer key-pair. So let&rsquo;s work on hiding those.</p>

<p>First step, turn the embedded parameters into environment variables by using the <em>SET</em> command.</p>

<pre lang="sql">set oauth_consumer_key='9DiJt6Faw0Dyr61tVOATA' on twitter;
set oauth_consumer_secret='XBF9j0B2SZAOWg44QTu6fCwYy5JtivoNNpvJMs6cA' on twitter;
set oauth_token='18342542-NkgUoRinvdJVILEwCUQJ3sL2CIm2ZwzS5jjj2Lg7y' on twitter;
set oauth_token_secret='D6ewAzsueTzQmrAJGFH0phV5zgWT88FOtcMeqW4YeI' on twitter;
select * from twitter.status.timeline.friends;</pre>


<p>Now that we&rsquo;ve turned all the parameters into environment variables, the next step is to throw the consumer key pair into YQL&rsquo;s storage so only YQL can access it.</p>

<p>To do this, create a YQL environment file, similar to this one, <a href="http://derekgathright.com/code/yahoo/yql/oauthdemo.txt"><a href="http://derekgathright.com/code/yahoo/yql/oauthdemo.txt">http://derekgathright.com/code/yahoo/yql/oauthdemo.txt</a></a></p>

<p>As you&rsquo;ll see, it&rsquo;s just a regular text file where I pasted my consumer key pair, along with importing the YQL community tables using the <em>ENV</em> command. Since we&rsquo;re replacing the previously included env file (store://datatables.org/alltableswithkeys) with our own, we need to chain-load it back in because it includes the Twitter tables. If you miss that step, you&rsquo;ll get a &ldquo;<em>No definition found for Table twitter.status.timeline.friends</em>&rdquo; error.</p>

<p>Before we store the env file in YQL, let&rsquo;s test it with this new query:</p>

<pre lang="sql">set oauth_token='18342542-NkgUoRinvdJVILEwCUQJ3sL2CIm2ZwzS5jjj2Lg7y' on twitter;
set oauth_token_secret='D6ewAzsueTzQmrAJGFH0phV5zgWT88FOtcMeqW4YeI' on twitter;
select * from twitter.status.timeline.friends;</pre>


<p>Also, you&rsquo;ll have to change the env file loaded in the querystring to &ldquo;<em>?env=<a href="http://derekgathright.com/code/yahoo/yql/oauthdemo.txt">http://derekgathright.com/code/yahoo/yql/oauthdemo.txt</a></em>&rdquo;</p>

<p>(<em>View: <a href="https://developer.yahoo.com/yql/console/?env=http://derekgathright.com/code/yahoo/yql/oauthdemo.txt#h=set%20oauth_token%3D%2718342542-NkgUoRinvdJVILEwCUQJ3sL2CIm2ZwzS5jjj2Lg7y%27%20on%20twitter%3B%0Aset%20oauth_token_secret%3D%27D6ewAzsueTzQmrAJGFH0phV5zgWT88FOtcMeqW4YeI%27%20on%20twitter%3B%0A%0Aselect%20*%20from%20twitter.status.timeline.friends%3B&amp;q=set%20oauth_token%3D%2718342542-NkgUoRinvdJVILEwCUQJ3sL2CIm2ZwzS5jjj2Lg7y%27%20on%20twitter%3B%0Aset%20oauth_token_secret%3D%27D6ewAzsueTzQmrAJGFH0phV5zgWT88FOtcMeqW4YeI%27%20on%20twitter%3B%0A%0Aselect%20*%20from%20twitter.status.timeline.friends%3B">YQL Console</a> &ndash; <a href="https://query.yahooapis.com/v1/public/yql?q=set%20oauth_token%3D'18342542-NkgUoRinvdJVILEwCUQJ3sL2CIm2ZwzS5jjj2Lg7y'%20on%20twitter%3B%0Aset%20oauth_token_secret%3D'D6ewAzsueTzQmrAJGFH0phV5zgWT88FOtcMeqW4YeI'%20on%20twitter%3B%0A%0Aselect%20*%20from%20twitter.status.timeline.friends%3B&amp;diagnostics=true&amp;env=http%3A%2F%2Fderekgathright.com%2Fcode%2Fyahoo%2Fyql%2Foauthdemo.txt">Results</a></em>)</p>

<p>Now that we have our environment file created and tested, let&rsquo;s tell YQL to import it. To do that, we&rsquo;ll construct a YQL query similar to:</p>

<pre lang="sql">insert into yql.storage.admin (name,url)
values ("oauthdemo","http://derekgathright.com/code/yahoo/yql/oauthdemo.txt")</pre>


<p>Which returns:</p>

<pre lang="xml"> 
       store://derekgathright.com/oauthdemo
<select>store://VfoIoYWhLWLxYzRTcrbvNb</select>

       [hidden]</pre>


<p>You now have 3 keys pointing to your data, and each does something different (think: unix permissions, R/W/X). For more information on what each of the 3 does, <a href="http://developer.yahoo.com/yql/guide/yql-storage-select-update-delete.html">Using YQL to Read, Update, and Delete Records</a>.</p>

<p>For this example we want the <em>execute</em> key, which is really just an alias to our stored env file. So if we change our query&rsquo;s URL to <em>?env=store://derekgathright.com/oauthdemo</em> and use the same YQL query as last time, you&rsquo;ll see we have now hidden our consumer key pair from the public.</p>

<p>(View: <a href="https://developer.yahoo.com/yql/console/?env=store://derekgathright.com/oauthdemo#h=set%20oauth_token%3D%2718342542-NkgUoRinvdJVILEwCUQJ3sL2CIm2ZwzS5jjj2Lg7y%27%20on%20twitter%3B%0Aset%20oauth_token_secret%3D%27D6ewAzsueTzQmrAJGFH0phV5zgWT88FOtcMeqW4YeI%27%20on%20twitter%3B%0A%0Aselect%20*%20from%20twitter.status.timeline.friends%3B">YQL Console</a> &ndash; <a href="https://query.yahooapis.com/v1/public/yql?q=set%20oauth_token%3D'18342542-NkgUoRinvdJVILEwCUQJ3sL2CIm2ZwzS5jjj2Lg7y'%20on%20twitter%3B%0Aset%20oauth_token_secret%3D'D6ewAzsueTzQmrAJGFH0phV5zgWT88FOtcMeqW4YeI'%20on%20twitter%3B%0A%0Aselect%20*%20from%20twitter.status.timeline.friends%3B&amp;diagnostics=true&amp;env=store%3A%2F%2Fderekgathright.com%2Foauthdemo">Results</a>)</p>

<p>Well there you have it, an example of how to hide your consumer key pair, which now allows you to use YQL as your server-side proxy as opposed to writing &amp; maintaining your own!</p>

<p><strong>A Pure JS Twitter Client is Born</strong></p>

<p>When I started at Yahoo, I wanted an excuse to learn YUI3 and expand my knowledge of YQL. So porting my jQuery/PHP based Twitter client seemed like a logical choice. The result of this work is an open-source project I call <a href="http://github.com/derek/Tweetanium">Tweetanium</a>. I&rsquo;m not going to argue it is the most polished or feature-rich Twitter client. In fact, it is quite buggy, and will likely always be that way. It&rsquo;s just something I toy around with occasionally to try out new things. But feel free to use it if you like. You can play around in it at <a href="http://tweetanium.net">tweetanium.net</a>.</p>

<p>As proof that there is no server-side JS, you can even use <a href="http://derek.github.com/Tweetanium/docroot/">a version of it</a> hosted on Github Pages, which is a static file host (no PHP, Ruby, Python, etc&hellip;). Hosting off Github Pages was a neat test for it, which basically proves you can host JS-only apps on commodity hosting. If you actually need to process data externally, you can use YQL tables for any APIs on the web, even your own custom-built ones (See: <a href="http://developer.yahoo.com/yql/guide/yql-opentables-chapter.html">YQL Open Data Tables</a>). Any scaling bottlenecks have now been offloaded to Github and Yahoo. The best part about this solution? It&rsquo;s free!</p>

<p>Post some comments if you have questions.</p>

<p><strong>UPDATE:</strong> A few people have asked, &ldquo;<em>But can&rsquo;t I execute YQL queries with your consumer keys now?</em>&rdquo; The answer is, yes. But that isn&rsquo;t as bad as you think because you only have half of the keys necessary. You are missing the unique keys assigned to a user on behalf of my application, and without those, you cannot make authenticated calls. If you get those, well&hellip; there&rsquo;s a whole other security issue of you having physical access to their computer or man-in-the-middle attacks.</p>

<p>&ldquo;<em>Ok, but can&rsquo;t I authenticate new keys posing as your app?</em>&rdquo; To my knowledge, Twitter does not currently support the oauth_callback parameter, which allows the requester to Twitter to redirect the user to the URL of their choice. So if EvilHacker tries to authenticate InnocentUser using my consumer keys, InnocentUser will just be directed back to my app&rsquo;s preset URL stored in Twitter&rsquo;s database. In the future, who knows how the OAuth spec, or Twitter&rsquo;s implementation of it, will change. This is mostly a proof-of-concept hack at this point.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[High Performance JavaScript (Book Review)]]></title>
    <link href="http://derek.github.io/blog/2010/book-review-high-performance-javascript-part-1/"/>
    <updated>2010-09-08T00:44:48-07:00</updated>
    <id>http://derek.github.io/blog/2010/book-review-high-performance-javascript-part-1</id>
    <content type="html"><![CDATA[<div style="float:right; padding:20px;"> <img src="http://covers.oreilly.com/images/9780596802806/lrg.jpg" width="200" /></div>


<p>When I saw on NCZ&rsquo;s blog that he was <a href="http://www.nczonline.net/blog/2010/02/09/announcing-high-performance-javascript/">writing a new book</a> on JavaScript performance techniques, I instantly went to pre-order it.  Having partially read through <em><a href="http://www.amazon.com/gp/product/059680279X?ie=UTF8&tag=deresblog-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=059680279X">High Performance JavaScript</a></em> by now, I figured I&rsquo;d start writing a review of this excellent book.</p>

<p>Since JavaScript is such an expressive language, there are dozens of different ways to do the same thing.  Some of them good, some mediocre, and a lot of them bad.  It&rsquo;s amazing how much awful JS info is on the web, all leftover from the dark ages of JS (&lsquo;96 &ndash; &#8216;05). Up until this point, we haven&rsquo;t had an authoritative source on the topic of how to write JavaScript that performs well, both in and out of the browser.  Sure we&rsquo;re had great books about web performance (<a href="http://www.amazon.com/gp/product/0596529309?ie=UTF8&tag=deresblog-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0596529309">High Performance Web Sites</a> is my favorite), but we haven&rsquo;t had anything specific to JavaScript.  Now we do.</p>

<p>Nicholas is widely known as one of the best minds in the JavaScript world today.  He joined Yahoo! in 2006 as a front end engineer and has been working on one of the most trafficked pages on the interwebs, the Yahoo! home page.  His blog (<a href="http://nczonline.net">nczonline.net</a>) is a treasure trove of information on all things JavaScript &amp; web performance.  Some recent gems include <a href="http://www.nczonline.net/blog/2010/01/05/interviewing-the-front-end-engineer/">Interviewing the front-end engineer</a> &amp; <a href="http://www.nczonline.net/blog/2009/12/15/writing-maintainable-code/">Writing maintainable code</a>.  It goes without saying that he knows his stuff when it comes to JavaScript &amp; performance.  As his books and blog posts have shown, he&rsquo;s also a very skilled technical writer, keeping topics fresh, concise, &amp; relevant.</p>

<p>I&rsquo;m writing this as I read along, so the verbosity of this post is due to me taking reference notes on interesting things as I go.
<a id="more"></a><a id="more-769"></a></p>

<hr />




<h2>Chapter 1: Loading & Execution</h2>


<p>Nick doesn&rsquo;t waste any time getting into what the reader wants, fresh tips! Right away we begin to learn the specifics of how browsers react depending on where &amp; how you include your JS.  There are many ways that work, but few ways that work <strong>well</strong>.</p>

<p>Specifically:</p>

<ul>
<li>Why is it important to put your &lt;script&gt; includes just above the closing &lt;/body&gt; tag?</li>
<li>What is the browser doing while loading those external files?</li>
<li>Why should you put all your in-page JS code <strong>above</strong> your CSS includes? <em>(A: If you put it after a &lt;/link&gt; tag referencing an external stylesheet, the browser will block execution while waiting for that stylesheet to download)</em></li>
<li>How you can use the <em>defer</em> attribute in &lt;script&gt; tags to delay non-essential execution of code.</li>
<li>A thorough look at dynamic script loading to import & execute your JS without blocking the browser.</li>
<li>An overview of some of the common JS loaders used today (YUI3, LazyLoader, & LABjs).</li>
</ul>


<p>While much of the content in this chapter contains common knowledge among experienced developers, it is important knowledge to cover as it serves as the foundation for the rest of the book.  Don&rsquo;t worry, we&rsquo;ll get more advanced.</p>

<hr />




<h2>Chapter 2: Data Access</h2>


<p>Here&rsquo;s where the sexy parts come into play; diagrams, graphs, and benchmarks!  This second chapter is where you&rsquo;ll learn about how exactly the JS engine accesses data depending on how you store it.  The steepest learning curve within JavaScript for beginning developers is understanding variable scope.  This is the first time I&rsquo;ve ever come across an explanation of JavaScript&rsquo;s <a href="http://www.jibbering.com/faq/faq_notes/closures.html#clScCh">[[Scope]]</a> property, now all the scoping &amp; speed issues make perfect sense!</p>

<p>Major topics covered in this chapter:</p>

<ul>
<li>Why do global variables perform so slowly?</li>
<li>Why creating data as local variables as opposed to object properties is 10%-50% faster (depending on the browser).</li>
<li>Why is it a good idea to create local instances of global variables?</li>
<li>Why <em>with</em>, <em>try/catch</em>, and <em>eval</em> are bad ideas from a performance perspective. (<em>A: they augment the scope by inserting themselves first on the tree</em>)</li>
<li>What truly happens under the hood when a variable is found to be <em>undefined</em>?</li>
<li>Closure scope and why they can cause memory leaks.</li>
<li>How prototype&#8217;s work and performance issues related to traversing up the prototype chain.</li>
<li>Why is it bad to use deeply nested object members (i.e. foo.bar.baz.bop())?</li>
</ul>


<p>There were so many &ldquo;Ah hah! I get it now!&rdquo; moments in this chapter for me that it alone was worth the price of the book.  It took me about 5x as long as it should have to get through this chapter because I was too busy playing with Firebug as I began to learn some of these concepts.</p>

<hr />




<h2>Chapter 3: DOM Scripting</h2>


<p>This book contains a few guest author chapters, and this is one of them.  In this chapter we learn about DOM scripting by another Yahoo, Stoyan Stefanov.</p>

<p>Many web developers don&rsquo;t understanding what exactly &ldquo;DOM scripting&rdquo; is, even though they likely do it on a daily basis.  Many could tell you what the acronym stands for and that it represents the structure of an (X)HTML/XML document, but most don&rsquo;t know that it also represents the API part of how you interact with the document.  When you are using <em>document.getElementById(&ldquo;foobar&rdquo;)</em> or <em>myelement.style.color = &ldquo;blue&rdquo;</em>, you are utilizing a DOM API function accessible via JavaScript, but it has nothing to do with the ECMAScript (aka: JavaScript) standard.</p>

<p>This chapter is chalk-full of great best practices &amp; overviews of DOM principles.  The first thing we learn is that accessing the DOM is so slow because we&rsquo;re crossing the bridge between JavaScript and native browser code.  Jumping between the two is expensive, and should be kept to a minimum.  There are a lot of tricks &amp; tips that are very under-utilized by most developers when DOM scripting.</p>

<p>For example:</p>

<ul>
<li>Using the non-standard <em>innerhtml</em> is way faster than creating nodes via the native <em>document.createElement()</em> method.</li>
<li>When looping through a NodeCollection you should cache the length of the node in a local variable because it&#8217;s own <em>length</em> property is very slow.</li>
<li>Iterating through <em>nextSibling()</em> can be 100x faster than using <em>childNodes()</em></li>
</ul>


<p>This chapter also goes into a detailed explanation of what repaint &amp; reflow are, when they occur, and how understanding them will improve your application performance.  The realization I had after reading the R&amp;R explanation is we do stupid stuff all the time simply because we don&rsquo;t understand how the browser renders and updates our pages.  You know how you&rsquo;ve always heard using <em>margin-left</em> &amp; <em>margin-right</em> as separate styles is a bad idea? Well, here you find out why.  Oh, and did you know there was a <em>cssText</em> property you can use to batch your CSS modifications? I didn&rsquo;t.</p>

<p>As JS libraries get more &amp; more popular, knowledge of good DOM scripting is becoming increasingly rare.  Take event delegation for example. Many developers just presume jQuery&rsquo;s <em>live()</em> or YUI3&rsquo;s <em>delegate()</em> methods are just magic.  They&rsquo;re far from it, and are actually easy to understand concepts. When interviewing candidates for front end jobs at Yahoo!, this is one of the primary concepts we expect candidates to understand.  They may have never used it, but the good ones will figure it out as they are whiteboarding and we walk them through the challenges.</p>

<p>JS libraries are awesome, but it&rsquo;s because they abstract out the cross-browser differences &amp; fix a flawed language, not because they allow you to forget what it actually going on under the hood.</p>

<hr />




<h2>Chapter 4: Algorithms & Flow Control</h2>


<p>Chapter 4 kicks off with a quick overview of the 4 different types of loops in JavaScript (<em>while</em>, <em>do-while</em>, <em>for</em>, <em>for-in</em>).  The first 3 have equivalent performance, but <em>for-in</em> is the one to watch out for and should only be used when iterating an unknown number of elements (i.e. object properties). We then learn about important concepts like length caching and various other optimization techniques focused on reducing the number of operations per iteration.</p>

<p>Next up are conditionals, such as <em>if-else</em> and <em>switch</em>.  We learn when it is appropriate to use each one, and when they can be ditched for a much faster method, like using arrays as lookup tables.</p>

<p>Finally we come to the topic of recursion.  We skip the basics of &ldquo;What is recursion&rdquo; and jump straight into browser limitations with call stacks and advanced recursion topics such as memoization to cut out the fat in your stack.</p>

<p>Since the majority of our time spent coding is inside of loops, conditionals, and (if we really want to optimize) recursion, this chapter has great, basic information on efficient shortcuts that will set you apart from the other developers on your team.  Techniques learned in this chapter extend beyond the scope of JavaScript and can be used in just about every other programming language.</p>

<hr />




<h2>Chapter 5: Strings and Regular Expressions</h2>


<p><em>Another guest author chapter, this time by regex guru Steve Levithan</em></p>

<p>Along with loops, another very common task in JavaScript is string manipulation, most commonly one by concatenation or regular expressions, so it makes sense to have a whole chapter to itself.</p>

<p>When most people start out with JS, their concatenation method is likely <em>var str = &ldquo;foo&rdquo;; str = str + &ldquo;bar&rdquo;; //str = &ldquo;foobar&rdquo;</em>, then they discover the += operator and it becomes <em>var str = &ldquo;foo&rdquo;; str += &ldquo;bar&rdquo;; //str = &ldquo;foobar&rdquo;</em>.  It turns out that one of those is more efficient when it comes to memory usage, and it happens to not be the latter.  This chapter provides some memory allocation table diagrams to explain the difference and how different browsers perform that operation. It should also be noted that another alternate method of concatenation, <em>[&lsquo;foo&rsquo;,&lsquo;bar&rsquo;].join(&lsquo;&rsquo;);</em> is the preferred method in IE 6 &amp; 7, so that should be considered depending on your userbase.</p>

<p>The second half of this chapter covers regular expressions, which usually make me cringe. I have no problem writing them, but they&rsquo;re an absolute nightmare to maintain sometimes.  Douglas Crockford has a saying, &ldquo;If a regular expression is longer than 2 inches, find another method.&rdquo;  I couldn&rsquo;t agree more.</p>

<hr />


<p>In this review, I only covered the first half of the book.  Here are the remaining chapters:</p>

<ul>
<li>Chapter 6: Responsive Interfaces</li>
<li>Chapter 7: Ajax</li>
<li>Chapter 8: Programming Practices</li>
<li>Chapter 9: Building and Deploying high performance JavaScript applications</li>
<li>Chapter 10: Tools</li>
</ul>


<p>If you like what you&rsquo;ve seen so far, <a href="http://www.amazon.com/Performance-JavaScript-Faster-Application-Interfaces/dp/059680279X">go buy it</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Return to Sunnyvale]]></title>
    <link href="http://derek.github.io/blog/2010/return-to-sunnyvale/"/>
    <updated>2010-04-23T20:26:48-07:00</updated>
    <id>http://derek.github.io/blog/2010/return-to-sunnyvale</id>
    <content type="html"><![CDATA[<div align="center"><img src="http://s89997654.onlinehome.us/screencaps/Flickr_Photo_Download__yahoo-sunnyvale-04-20100618-083757.jpg" alt="" width="613" height="194" /></div>


<p>So right now I&rsquo;m sitting in a booth on the Yahoo! campus, the same booth where I set a goal 20 months ago that one day I&rsquo;d work for Yahoo! and&hellip;.</p>

<p>[Wavy distorted omg we&rsquo;re going into a flashback. Begin narration]</p>

<p>My first experience on the Yahoo campus was for Y! HackDay 2008. I remember coming to the campus, being totally lost, and overwhelmed, almost like your first day of High School or College. I wasn&rsquo;t an employee or anything. I was just a dumb programmer who wanted a taste of what Silicon Valley was really like. Seriously, I come from the startup world in Kansas City, I was in absolute awe of the place. This is where the Internet happens. Holy shit.</p>

<p>I came to HackDay armed with an idea for a hack to build, but was totally unable to focus, so I just sat around, tweeting, talking, and having fun. The music, the hacks, the food, the beer. I was totally awestruck when I talked to someone who worked at Yahoo!, especially the ones working on products I had used. I knew at that moment this was a place I&rsquo;d always strive to work at. I knew I just <em>had</em> to work here, and be the person on the other end of that conversation.
<a id="more"></a><a id="more-702"></a>
Through the course of that weekend, I met <a href="http://twitter.com/ShawnRecruits4u">a recruiter</a> who for one reason or another took interest in my skills and said he&rsquo;d follow up with me. I didn&rsquo;t expect he would and he was just being nice. A couple weeks later I got a call from him stating he was interested in setting up an interview. I was shocked. &ldquo;Ok, yeah, umm.. sure, anytime&rdquo; I was so nervous before that first call. I reviewed just about every book I owned on programming, and I own a lot. I got the call and was speaking with an engineering manager who started asking me all sorts of questions about web development. In retrospect, I totally bombed it, and knew it. Rejected.</p>

<p>Down, but not out, I was focused, I knew it was attainable, but I just needed more time. So, over the next year I did just about everything I could to get my skills up to the level they needed to be for another crack at an interview, always keeping that original interview experience in mind. I had a blueprint. A plan.</p>

<p>A year later I got an email&hellip; &ldquo;I&rsquo;m back at Yahoo! Want another interview?&rdquo; It was the original recruiter. &ldquo;Yeah, absolutely.&rdquo; The only goal I had this time was getting further than the first. I wouldn&rsquo;t be totally bummed out if I didn&rsquo;t get the job, but I at least wanted an on-site interview, just as validation I was making progress. Off I went, studying my ass off for about a week straight, so focused on the lone objective of nailing that phone-screen. The phone rang, and we started chatting. These questions were totally different from the first time. But that&rsquo;s ok, I knew them. Apparently I did well, and I got an on-site.</p>

<p>The on-site (at the Santa Monica office) went well, and I got an offer. It was a big step leaving Kansas City, but one that I&rsquo;d always regret if I stayed. So off I went, off to sunny SoCal. I started at the Santa Monica office working with the Entertainment team in November. Due to some mix-ups, I never did make it up here to Sunnyvale for training &amp; orientation. Beyond that, there was never much need for me to be up here in person as we have tele-conferencing equipment galore, and these virtual meetings are in our DNA because we have offices around the country, and around the world.</p>

<p>So 5 months go by and I finally get up here for my first time. I&rsquo;m actually glad I didn&rsquo;t get up here before. I get to experience my first day at Yahoo, twice. I knew it was going to be weird, a good weird, and I knew that first time I came here was going to start flashing back. So here I am, sitting in the same booth, sipping my (free) mocha cappucino, admiring the courtyard, the weather, and the conversations going on around me. This is awesome. I have somewhere to be right now. But, nope&hellip;</p>

<p>If you haven&rsquo;t set goals for yourself, do it. Set big ones. Set life-changing ones. When you achieve those, set higher ones, and just keep rolling. If you don&rsquo;t have goals, find them. I stumbled across this one because I saw a tweet about HackDay, thought it sounded fun, and stepped on a plane to fly out here almost 2 years ago. Random. Lucky&hellip; Bold.</p>

<p>It&rsquo;s feelings like this that you wish you could just bottle up and relive whenever you want.</p>

<p>So, I guess that&rsquo;s the reason I&rsquo;m writing this. A 30 minute slice of awesomeness, carved into this blog.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dear Twitter, I Quit]]></title>
    <link href="http://derek.github.io/blog/2010/my-birthday-gift-to-twitter-i-quit/"/>
    <updated>2010-03-21T15:59:24-07:00</updated>
    <id>http://derek.github.io/blog/2010/my-birthday-gift-to-twitter-i-quit</id>
    <content type="html"><![CDATA[<p>As Twttr (sic) <a href="http://mashable.com/2009/03/21/happy-birthday-twitter/">celebrates its 4th birthday</a>, I figure it&rsquo;s as good of time as any to blog about something I&rsquo;ve been thinking for a while.  No, don&rsquo;t worry, I&rsquo;m not going to quit tweeting, but I will quit competing. Which sadly, is probably what they want.</p>

<p>Twitter engineer Alex Payne sent out a prophetic tweet last month. In this message to the Twittersphere, he basically says that Twitter.com is going to be so badass and feature-rich that you&rsquo;ll soon rethink your need for 3rd party Twitter clients. This caused an uproar in the developer community as many (over-reacting) people took his comments to mean Twitter was going to try &amp; kill off the alternative clients. <a href="http://twitter.com/al3x">@Al3x</a> and the rest of Twitter HQ went into damage control mode to explain that Twitter wasn&rsquo;t attacking alternative clients and that they were still supportive of the developer community. Hugs all around, right? No. I think most people saw the writing on the wall at that point.</p>

<p>I know I have. So, after 2 years of developing my own Twitter clients, I&rsquo;ve decided that I&rsquo;m finally throwing in the towel.  Twitter has built a great web app, so there&rsquo;s little need for me to continue. There&rsquo;s part of me that is sad, but mostly I&rsquo;m really happy for Twitter.  Also, I&rsquo;m relieved as I can now focus on something else.
<a id="more"></a><a id="more-678"></a>
A little background&hellip; It wasn&rsquo;t up until recently that Twitter&rsquo;s own web client (Twitter.com) lacked most of the features that I wanted, so I was forced to build them on my own. I began building <a href="http://tweenky.com">Tweenky</a> almost 2 years ago and the goal was simple&hellip; create a Twitter web client that had the following features:
A) A friendly Ajax interface
B) Integrated searching
C) Groups
D) Saved searches
E) Fixed the @reply problem where replies were not visible to your replies feed unless it started with &ldquo;@username&rdquo;
F) Had other basic shortcut features (like retweet links)</p>

<p>When it was ready in the summer of &lsquo;08, I released it to the wild with the help of <a href="http://techcrunch.com/2008/07/24/tweenky-brings-gmails-good-looks-to-twitter/">TechCrunch</a> and other tech blogs, who all praised its set of features. I&rsquo;m not going to claim I was the only one working on such features. Most of them were just obvious extensions to how people really wanted to use the Twitter service. They would have been implemented by Twitter themselves had the service been stable enough to add feature development resources. It&rsquo;s funny to think that between 2006 and 2009 Twitter.com remained largely unchanged. Why? Because they were generating too many failwhales and fixing those was the #1 priority.</p>

<p>By 2009, the engineering team had rebuilt Twitter into a stable platform and they were finally able to let the front-end developers loose and start working on features. First came some ajaxy goodness, then integrated searching the replies/mentions fix. Later in the year they added Lists and the Retweet feature. At that point, I noticed Tweenky started to become less &amp; less useful. Others did too and the userbase started to decrease.</p>

<p>Enter 2010&hellip; The front-end team is beginning to crank out features &amp; tweaks at a fast pace. So far this year we&rsquo;ve seen hovercards, location dectection, and integrated maps. It&rsquo;s finally at the point where the speed of innovative features is out-pacing what the developer community will be able to keep up with. There are still some major clients, such as Tweetie (on the desktop) that haven&rsquo;t even integrated Lists yet. I&rsquo;m not going to attempt to work on the hovercards or integrated maps, not because I can&rsquo;t do them, but because what&rsquo;s the point? I&rsquo;ve actually begun using the Twitter.com web client more than my own client because it simply lacks essential features. Sure I can add them, but once I&rsquo;ve completed that, the larger-than-1-person-front-end team at Twitter will have rolled out a couple more slick features, and I will always be playing catch-up.</p>

<p>So here&rsquo;s the point of this post&hellip; I&rsquo;m done. From here on out I suspect the majority of my Twitter time will be spent on the Twitter.com web client. Don&rsquo;t take this the wrong way, I&rsquo;m actually really happy for Twitter and the awesome front-end/UX team they&rsquo;ve assembled (which includes a number of ex-Yahoo&rsquo;s =D ). They&rsquo;ve implemented most of the &ldquo;must-have&rdquo; features that 3rd party developers have been working on for years. This is a good thing because those features are now available to the majority of the Twitter userbase instead of a small portion. I suspect over the course of 2010 and beyond, the pace that we see new features will continue to increase, and with every new release, more &amp; more 3rd party developers will cease working on their own clients. This will be a bitter pill for some in the developer community to swallow but the side-effect is they&rsquo;ll be spending less time on simple, basic features that Twitter.com should have, and instead hopefully on innovative non-client apps or things completly unrelated to Twitter.</p>

<p>I&rsquo;m mostly happy with this direction. The main reason I&rsquo;ve developed Twitter clients is to geek around and gain experience in areas I feel my knowledge is lacking. I&rsquo;ve never approached my client development as &ldquo;OMG, I have to get as many people as possible to use this thing so I can make money and/or sell it!&rdquo; I&rsquo;ve never attempted to monetize my work. I&rsquo;ve just approached it as there&rsquo;s a certain user experience I want to have with Twitter, and if anyone else wants to join the fun, cool. No? That&rsquo;s cool too. Work hard and good things will come.  Having converted the original Tweenky client from mostly PHP to all JavaScript, I&rsquo;ve been able to gain valuable experience with jQuery, YUI3, &amp; JS in general. To me, that is satisfying enough. All the JS, REST API, and scaling knowledge I gained through this process is one of the reasons I now have a job at Yahoo.</p>

<p>So what&rsquo;s next? I dunno. If I&rsquo;m spending X less hours per week trying to replace Twitter.com, I can now spend X hours working on something else. I&rsquo;ll most certainly work on some non-client Twitter apps, but I&rsquo;m hoping to spend the majority of my time on non-related Twitter projects. Maybe some much needed <a href="http://nodejs.org/">Node.js</a> hacking? Maybe some WebOS apps? Hmmm&hellip; Stay tuned.</p>

<p>P.S. Tweenky has always been an open-source project. You can find the source code <a href="http://github.com/derek/tweenky/">on GitHub</a>. You can also find Tweenky&rsquo;s cousin &ldquo;Tweetanium&rdquo; (a YUI3 rewrite) <a href="http://github.com/derek/Tweetanium">on GitHub</a> as well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node-yql]]></title>
    <link href="http://derek.github.io/blog/2010/node-yql/"/>
    <updated>2010-03-06T15:29:04-08:00</updated>
    <id>http://derek.github.io/blog/2010/node-yql</id>
    <content type="html"><![CDATA[<div align="center" style="float:left; padding:20px;"><img src="http://farm3.static.flickr.com/2601/3858500752_9c3a39e4af.jpg" height="200" /></div>


<p>The more I play around with <a href="http://nodejs.org/">Node.js</a>, the more I love server-side JavaScript.  Once you get over the weirdness of writing JavaScript outside of the browser, it feels very natural.  And the bonus is that it is blazing fast.</p>

<p>Also, as I&rsquo;ve been playing around with <a href="http://developer.yahoo.com/yql/">YQL</a> (Yahoo Query Language) more lately, I realized I wanted to be able to access YQL data from within my Node app.  So, I created a <a href="http://github.com/drgath/node-yql">node-yql </a> module.</p>

<p>Now you can do something like&hellip;</p>

<div style="clear:both"></div>


<pre lang="javascript">
YQL.get("SELECT * FROM weather.forecast WHERE location=90066", function(response) {
    
    var location  = response.query.results.channel.location,
        condition = response.query.results.channel.item.condition;
    
    sys.puts("The current temperature in " + location.city + " is " + condition.temp + " degrees");
});
// Output: The current temperature in Los Angeles is 57 degrees
</pre>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jsFiddle: A JavaScript Playground]]></title>
    <link href="http://derek.github.io/blog/2010/jsfiddle-a-javascript-playground/"/>
    <updated>2010-02-25T00:59:24-08:00</updated>
    <id>http://derek.github.io/blog/2010/jsfiddle-a-javascript-playground</id>
    <content type="html"><![CDATA[<p>Ajaxian had <a href="http://ajaxian.com/archives/jsfiddle" target="_blank">a story</a> yesterday about a brand-new JavaScript playground called <a href="http://jsfiddle.net">jsFiddle</a>. A write and execute web-based JavaScript IDE is nothing new, but this is much, much more than that.</p>

<p><a href="http://s89997654.onlinehome.us/screencaps//YQL_YUI3_Twitter_example_-_jsFiddle_-_Online_Editor_for_the_Web_%28JavaScript%2C_MooTools%2C_jQuery%2C_Prototype%2C_YUI%2C_Glow_and_Dojo%2C_HTML%2C_CSS%29-20100224-215440.jpg"><img width="100%" src="http://s89997654.onlinehome.us/screencaps//YQL_YUI3_Twitter_example_-_jsFiddle_-_Online_Editor_for_the_Web_%28JavaScript%2C_MooTools%2C_jQuery%2C_Prototype%2C_YUI%2C_Glow_and_Dojo%2C_HTML%2C_CSS%29-20100224-215440.jpg"></a></p>

<p>The real power of jsFiddle is that you have the option to include any of the most popular JS libraries, including; Mootools, jQuery, Prototype, YUI2.8, YUI3, Glow, Vanilla, Dojo, Processing.js, &amp; ExtJS.  This feature gives anyone the ability to try out any of these libraries without going through the task of downloading, extracting, and coded up some examples.  With a few mouse-clicks you can view example snippets from any of the major JS libraries, and start editing them to see how they work.</p>

<p>As if that wasn&rsquo;t enough, jsFiddle also includes social features that give you the ability to write a snippet, save it, and share the URL.  As I was hanging out in various JavaScript IRC chatrooms tonight, I continually found myself using jsFiddle to code up snippets to answer questions.  In the past, everyone would always just use Pastebin.com, but that lacks any interactive features.  Now you can use jsFiddle as a replacement to Pastebin for any JS, HTML, or CSS snippets and the user will have the ability to actually edit, execute, and view the output.</p>

<p>As icing on the cake, you can take your snippets, copy the embed code, and paste them anywhere.  Here&rsquo;s a snippet that I was able to code up in about 15 minutes (writing this blog post took longer than that!) to demonstrate the power of YUI3, YQL, and the Twitter API.  In this iframe, you&rsquo;ll find all the JS, CSS, and HTML you need to create a simple little Twitter widget.</p>

<p>In all, this is an amazing product that I&rsquo;ll likely find myself using on a daily basis.</p>

<iframe style="width: 100%; height: 500px" src="http://jsfiddle.net/derek/Vjxt2/embedded/"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crockford on JavaScript]]></title>
    <link href="http://derek.github.io/blog/2010/crockford-on-javascript-part-1/"/>
    <updated>2010-02-21T03:08:46-08:00</updated>
    <id>http://derek.github.io/blog/2010/crockford-on-javascript-part-1</id>
    <content type="html"><![CDATA[<div><object width="576" height="324"><param name="movie" value="http://d.yimg.com/m/up/ypp/default/player.swf"></param><param name="flashVars" value="vid=17880750&"></param><param name="allowfullscreen" value="true"></param><param name="wmode" value="transparent"></param><embed width="576" height="324" allowFullScreen="true" src="http://d.yimg.com/m/up/ypp/default/player.swf" type="application/x-shockwave-flash" flashvars="vid=17880750&"></embed></object></div>


<p>I just finished watching Part 1 of Douglas Crockford&rsquo;s ongoing lecture series on JavaScript, and it&rsquo;s fascinating stuff.  A must watch for any programmer.  Even if you don&rsquo;t code in JS, it&rsquo;s worth watching simply because this first part is all about the history of programming. (video of talk is below)</p>

<p>As web developers, we spend anywhere from a little bit of our time to the majority of it coding in JavaScript, but few know the history behind the language.  I&rsquo;m not talking about just reading the Wikipedia article and knowing that it was created by Brenden Eich at Netscape in &lsquo;95, I&rsquo;m talking about the history of where the ideas behind the language came from and everything that influenced it.  Like most every language, JavaScript&rsquo;s syntax and style didn&rsquo;t appear out of nowhere, it was influenced by a number of different languages, and those influencers were in turn also influenced by a slew of languages.<a id="more"></a><a id="more-665"></a>It&rsquo;s easy for those of us that started programming with C (or anything after) to just look at it as the &ldquo;Alpha&rdquo; language and ignore everything that happened before it, but that&rsquo;s missing a lot of really important history, that we, as professionals, should know.  It&rsquo;s like a politician in the United States just ignoring everything that happened before 1776.  Learn from the mistakes of the past and spot the trends going forward and pave the best path.  Crockford shows us snippets of languages that were created in the 60&rsquo;s and 70&rsquo;, dissects them, and explains why certain people thought they were good ideas at the time.  It&rsquo;s amazing to think that there was a time before modules or functions, or before we had figured out the best way to format a <em>for</em> loop.  The history of programming languages is littered with a ton of bad ideas, but occasional brilliant ideas.  Those brilliant ideas are what get refined, and lay the foundation in the next generation of languages.</p>

<p>Finally, one concept he goes back to over and over that I found really interesting is that programmers are a <strong>very</strong> stubborn breed.  We all know this.  There&rsquo;s little point to all our flame wars on which language or framework is better, and most of it comes from either insecurity or ignorance.  He says it takes a long time for us to evolve, and he&rsquo;s right.  It&rsquo;s not because new ideas aren&rsquo;t coming along all the time, but it&rsquo;s because the adoption of new ideas only take place at each generation shift, when  the &ldquo;old&rdquo; thinkers get replaced those with few preconceived notions.  The world didn&rsquo;t wake up one day and realize that GOTO statements were bad, it&rsquo;s that those who supported GOTO and argued for it for a decade finally retired.  Out with the old, in with the new.  That&rsquo;s evolution.</p>

<p>Anyways, I could go on and on about all the &ldquo;Ah hah!&rdquo; moments in this talk, but you really need to watch it for yourself. I&rsquo;ll probably chime in again after part 2, which I&rsquo;m probably going to watch right now.  I&rsquo;m excited.  It&rsquo;s like a sequel.  &ldquo;Ooo! What happens now?!&rdquo;</p>

<p>Also, here&rsquo;s the &ldquo;Mother of all Demos&rdquo; video he mentions about halfway through.</p>

<div align="center">
<embed id=VideoPlayback src=http://video.google.com/googleplayer.swf?docid=-8734787622017763097&hl=en&fs=true style=width:400px;height:326px allowFullScreen=true allowScriptAccess=always type=application/x-shockwave-flash> </embed></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Amazon and Lala: What Could Have Been]]></title>
    <link href="http://derek.github.io/blog/2010/amazon-and-lala-what-could-have-been/"/>
    <updated>2010-01-22T15:36:31-08:00</updated>
    <id>http://derek.github.io/blog/2010/amazon-and-lala-what-could-have-been</id>
    <content type="html"><![CDATA[<div style="float:right;padding:20px;"><img src="http://www.derekville.net/wp-content/uploads/2010/01/lala.jpeg" alt="lala.jpeg" border="0" width="169" height="112" /></div>


<p>It&rsquo;s now been about 6 weeks since <a href="http://www.techcrunch.com/2009/12/04/apple-acquires-lala/">Apple bought Lala</a> and I&rsquo;ve spent some time reflecting on the acquisition.  When I first heard the news, it sounded like a good fit.  After-all, Lala is essentially a web-based version iTunes and has some great technology powering it.  It makes sense that Apple would  want to buy the next best thing and get some great engineers in the process.   However, I didn&rsquo;t think at the time that Apple&rsquo;s strategy would become so clear, so soon.  Apple&rsquo;s acquisitions usually take years to come to fruition.  Not this time though. TechCrunch recently reported that Apple is planning on transforming iTunes into a cloud-based iTunes.com service, and Lala&rsquo;s technology is the quickest way to do that. (&ldquo;<a href="http://www.techcrunch.com/2010/01/19/apples-secret-cloud-strategy-and-why-lala-is-critical/">Apple’s Secret Cloud Strategy And Why Lala Is Critical</a>&rdquo;).</p>

<p>Seeing the immediate impact Lala&rsquo;s technology can have, I began to think about who else was in the bidding war for Lala?  Most reports say there were multiple companies interested, so you have to assume the a few of the typical parties were involved; Google, Amazon, Microsoft, Yahoo, AOL, Facebook, &amp; MySpace.  Only a couple of those companies stand out as a great fit, Amazon &amp; MySpace.  Right now MySpace has too many problems to deal with, so that leaves just one likely suitor&hellip; Amazon.
<a id="more"></a><a id="more-656"></a>
Amazon&rsquo;s entry into the digital music download space has been game-changing.  Prior to <a href="http://www.amazon.com/mp3">Amazon.com/mp3</a>, music lovers had no where to go to purchase non-DRM&rsquo;d MP3s.  We were stuck in the world of buying CDs to rip, buying DRM&rsquo;d tracks from iTunes, or of course&hellip; pirating music.  When Amazon came into the market in 2008, their impact was immediately felt as prices began to drop and DRM began to die.  This opened the floodgates to other services who also began selling non-DRM&rsquo;d MP3s, and music streaming became a sustainable business model.  Without Amazon&rsquo;s entry, I suspect little would have changed over the past 2 years.  Having competition for Apple is vitally important to the evolution of the media industry.  Apple is an amazingly innovative company, but like most companies, they grow content &amp; less innovative without anyone breathing down their back.</p>

<p>As painless as Amazon has tried to make the downloading process when you purchase tracks from their MP3 store, it is still not as smooth and elegant as iTunes.   To add insult to injury, once the download is complete, Amazon&rsquo;s user experience is then transfered over to iTunes (for most users) where the user must import the purchased files to begin listening.  Amazon clearly needs to do something about this.  Transferring a customer into your rival&rsquo;s product at the end of the transaction process is a giant flaw in product design.  They need to provide their customers a way to stay in an Amazon environment throughout the Purchase->Download->Listen->Manage cycle.  This is where their acquisition of Lala would have been perfect.</p>

<p>Had Amazon bought Lala, they would have obtained the engineering team that is hands-down the best at building a web-based media manager.  After integrating Amazon MP3 with Lala, they could then integrate the Amazon Video &amp; Kindle management interfaces into the Lala-based manager.  Beyond music, video, and books, Amazon could then begin to expand into other areas, perhaps buy a company like Roku and make their streaming video experience end-to-end Amazon as well.  We could have had a real competitor to iTunes.  Sadly though, Amazon dropped the ball with Lala, especially since the acquisition only cost Apple $17 million.  That&rsquo;s nothing for a company that just spent over a billion dollars to purchase Zappos.</p>

<p>We&rsquo;re clearly approaching a time where our music devices are going to have constant wireless broadband connections.  You won&rsquo;t have to worry about locally storing music, it can all be hosted in the cloud and streamed to you on demand.  This isn&rsquo;t a brand new concept, but the timing is right for it to finally become mainstream.  If Apple is successful in transforming iTunes into iTunes.com, unchallenged, they will likely be able to declare &ldquo;game over&rdquo; with music delivery in the US.</p>

<p>Hopefully Amazon sees the writing on the wall and steps up their game to provide a challenge.  Is Spotify our only hope?</p>
]]></content>
  </entry>
  
</feed>
